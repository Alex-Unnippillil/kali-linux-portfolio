{"version":3,"file":"service-worker.js","sources":["node_modules/workbox-core/_version.js","node_modules/workbox-core/_private/logger.js","node_modules/workbox-core/models/messages/messageGenerator.js","node_modules/workbox-core/_private/WorkboxError.js","node_modules/workbox-routing/_version.js","node_modules/workbox-routing/utils/constants.js","node_modules/workbox-routing/utils/normalizeHandler.js","node_modules/workbox-routing/Route.js","node_modules/workbox-routing/RegExpRoute.js","node_modules/workbox-routing/Router.js","node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","node_modules/workbox-routing/registerRoute.js","node_modules/workbox-strategies/_version.js","node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","node_modules/workbox-core/_private/cacheNames.js","node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","node_modules/workbox-core/_private/Deferred.js","node_modules/workbox-core/models/quotaErrorCallbacks.js","node_modules/workbox-strategies/StrategyHandler.js","node_modules/workbox-core/_private/timeout.js","node_modules/workbox-core/_private/getFriendlyURL.js","node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","node_modules/workbox-strategies/Strategy.js","node_modules/workbox-core/_private/waitUntil.js","node_modules/workbox-precaching/_version.js","node_modules/workbox-precaching/utils/createCacheKey.js","node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","node_modules/workbox-core/copyResponse.js","node_modules/workbox-precaching/PrecacheStrategy.js","node_modules/workbox-precaching/PrecacheController.js","node_modules/workbox-precaching/PrecacheRoute.js","node_modules/workbox-precaching/utils/generateURLVariations.js","node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","node_modules/workbox-precaching/precacheAndRoute.js","node_modules/workbox-precaching/createHandlerBoundToURL.js","../../tmp/a7d8a496ec584245ef88cb3dbfe1f80b/service-worker.js","node_modules/workbox-core/clientsClaim.js","node_modules/workbox-precaching/precache.js","node_modules/workbox-precaching/addRoute.js","node_modules/workbox-routing/NavigationRoute.js","node_modules/workbox-strategies/NetworkFirst.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cachedResponseWillBeUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#createHandlerBoundToURL} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call the\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\n * instead of using this function.\n *\n * @param {string} url The precached URL which will be used to lookup the\n * `Response`.\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n * response from the network if there's a precache miss.\n * @return {workbox-routing~handlerCallback}\n *\n * @memberof workbox-precaching\n */\nfunction createHandlerBoundToURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.createHandlerBoundToURL(url);\n}\nexport { createHandlerBoundToURL };\n","import {registerRoute as workbox_routing_registerRoute} from '/workspace/kali-linux-portfolio/node_modules/workbox-routing/registerRoute.mjs';\nimport {NetworkFirst as workbox_strategies_NetworkFirst} from '/workspace/kali-linux-portfolio/node_modules/workbox-strategies/NetworkFirst.mjs';\nimport {clientsClaim as workbox_core_clientsClaim} from '/workspace/kali-linux-portfolio/node_modules/workbox-core/clientsClaim.mjs';\nimport {precacheAndRoute as workbox_precaching_precacheAndRoute} from '/workspace/kali-linux-portfolio/node_modules/workbox-precaching/precacheAndRoute.mjs';\nimport {NavigationRoute as workbox_routing_NavigationRoute} from '/workspace/kali-linux-portfolio/node_modules/workbox-routing/NavigationRoute.mjs';\nimport {createHandlerBoundToURL as workbox_precaching_createHandlerBoundToURL} from '/workspace/kali-linux-portfolio/node_modules/workbox-precaching/createHandlerBoundToURL.mjs';/**\n * Welcome to your Workbox-powered service worker!\n *\n * You'll need to register this file in your web app.\n * See https://goo.gl/nhQhGp\n *\n * The rest of the code is auto-generated. Please don't update this file\n * directly; instead, make changes to your Workbox build configuration\n * and re-run your build process.\n * See https://goo.gl/2aRDsh\n */\n\n\nimportScripts(\n  \"workers/service-worker.js\"\n);\n\n\n\n\n\n\n\nself.skipWaiting();\n\nworkbox_core_clientsClaim();\n\n\n/**\n * The precacheAndRoute() method efficiently caches and responds to\n * requests for URLs in the manifest.\n * See https://goo.gl/S9QRab\n */\nworkbox_precaching_precacheAndRoute([\n  {\n    \"url\": \"apps/asteroids/index.html\",\n    \"revision\": \"6f04ee7f6664c59ff00bbf89fa45ffca\"\n  },\n  {\n    \"url\": \"apps/asteroids/main.js\",\n    \"revision\": \"eb3ec58049f87f7c956ded67b6172f23\"\n  },\n  {\n    \"url\": \"apps/car-racer/editor.html\",\n    \"revision\": \"e8980aa071150a08550c39028a295904\"\n  },\n  {\n    \"url\": \"apps/car-racer/editor.js\",\n    \"revision\": \"77a22ff2d124a3a8875a1e9cf4b24d3c\"\n  },\n  {\n    \"url\": \"apps/car-racer/index.html\",\n    \"revision\": \"b612bc755b8ae8eddb77f29e5a712407\"\n  },\n  {\n    \"url\": \"apps/car-racer/main.js\",\n    \"revision\": \"619a03ee0f0910fa53fbc3c525713b23\"\n  },\n  {\n    \"url\": \"apps/flappy/skins/blue.svg\",\n    \"revision\": \"55761e2882b4a12f177224bbdb463beb\"\n  },\n  {\n    \"url\": \"apps/flappy/skins/red.svg\",\n    \"revision\": \"fec994b5d174a807aface6f1d6a264b6\"\n  },\n  {\n    \"url\": \"apps/flappy/skins/yellow.svg\",\n    \"revision\": \"0fedc0aa38f4eda0fffc77935a87f9bb\"\n  },\n  {\n    \"url\": \"apps/frogger/index.html\",\n    \"revision\": \"b6013c038dbcb8570fee48bfd2f1b6b1\"\n  },\n  {\n    \"url\": \"apps/frogger/main.js\",\n    \"revision\": \"c5b95eccda622e10a52da455abc89053\"\n  },\n  {\n    \"url\": \"apps/frogger/splash.svg\",\n    \"revision\": \"7162f7424c232b218a96a1747c52c245\"\n  },\n  {\n    \"url\": \"apps/phaser_matter/level1.json\",\n    \"revision\": \"bafceff44614b7e7a6132096c017b150\"\n  },\n  {\n    \"url\": \"apps/phaser_matter/player.svg\",\n    \"revision\": \"65c31ae3f8abf4709adb598b08256828\"\n  },\n  {\n    \"url\": \"apps/platformer/editor.html\",\n    \"revision\": \"5c9b8abfa2278decfd6d6b3c13ce611c\"\n  },\n  {\n    \"url\": \"apps/platformer/editor.js\",\n    \"revision\": \"5a7eaa937cbd2954d10a0383eddbd808\"\n  },\n  {\n    \"url\": \"apps/platformer/engine.js\",\n    \"revision\": \"11f03f818ef89b041cda97b32be09b94\"\n  },\n  {\n    \"url\": \"apps/platformer/index.html\",\n    \"revision\": \"cceb0f12cc551f72a1d4624dd62e71dd\"\n  },\n  {\n    \"url\": \"apps/platformer/levels.json\",\n    \"revision\": \"0d3d7ae69eda3d344234f010d3c4f005\"\n  },\n  {\n    \"url\": \"apps/platformer/levels/level1.json\",\n    \"revision\": \"f9d0a81c3adf9c773af3d11fedfc052b\"\n  },\n  {\n    \"url\": \"apps/platformer/levels/level2.json\",\n    \"revision\": \"409b3008c6bd3c0eca657a57abda9446\"\n  },\n  {\n    \"url\": \"apps/platformer/levels/sample1.json\",\n    \"revision\": \"fc25485b430d85df3ed60bd83ad24910\"\n  },\n  {\n    \"url\": \"apps/platformer/levels/sample2.json\",\n    \"revision\": \"af3ff34d101fca143bce52349e14c719\"\n  },\n  {\n    \"url\": \"apps/platformer/main.js\",\n    \"revision\": \"f697f9a2565d56ab4d73f049d9f015d0\"\n  },\n  {\n    \"url\": \"apps/platformer/styles.css\",\n    \"revision\": \"cc2c8ae92f29c5dfb3f2e25115a68bab\"\n  },\n  {\n    \"url\": \"apps/pong/index.html\",\n    \"revision\": \"6e8ddc49cf336af143e974091cf83fff\"\n  },\n  {\n    \"url\": \"apps/pong/main.js\",\n    \"revision\": \"af751531c4faded56f4133fa9d47cdd4\"\n  },\n  {\n    \"url\": \"apps/tetris/index.html\",\n    \"revision\": \"1ed728c6e2f50e48763d4436e1d93bc5\"\n  },\n  {\n    \"url\": \"apps/tetris/main.js\",\n    \"revision\": \"91ec28cf8ed10534de8377cb97706b19\"\n  },\n  {\n    \"url\": \"autopsy-demo.json\",\n    \"revision\": \"b4a4f4b893d91636b0a19b8ceb1d4c6f\"\n  },\n  {\n    \"url\": \"bluetooth/known_devices.json\",\n    \"revision\": \"df422e4bceb026460493448b706fb476\"\n  },\n  {\n    \"url\": \"checkers-worker.js\",\n    \"revision\": \"894243de81526b4879b506166b237d17\"\n  },\n  {\n    \"url\": \"demo-data/autopsy/filetree.json\",\n    \"revision\": \"0995e04735d32e5b780da7035fb2fce1\"\n  },\n  {\n    \"url\": \"demo-data/autopsy/hashes.json\",\n    \"revision\": \"a9838d138ec140554fa20d47728bd6b4\"\n  },\n  {\n    \"url\": \"demo-data/beef/hooks.json\",\n    \"revision\": \"ec2fc2e5f1d3a12723050e3195d50f13\"\n  },\n  {\n    \"url\": \"demo-data/beef/modules.json\",\n    \"revision\": \"cb6a6746d03437214edc3b956b8028db\"\n  },\n  {\n    \"url\": \"demo-data/bluetooth/scan.json\",\n    \"revision\": \"d03d59e8d2cdeaf5635de4130fb74a19\"\n  },\n  {\n    \"url\": \"demo-data/dsniff/arpspoof.json\",\n    \"revision\": \"74e1b16fd5a16a9f177f8346b1016a89\"\n  },\n  {\n    \"url\": \"demo-data/dsniff/pcap.json\",\n    \"revision\": \"e29e9a8f44a8e145209bdcf5d349d082\"\n  },\n  {\n    \"url\": \"demo-data/dsniff/urlsnarf.json\",\n    \"revision\": \"f3f02cba392cf9b6c49b9700eba4d4a9\"\n  },\n  {\n    \"url\": \"demo-data/ghidra/disassembly.json\",\n    \"revision\": \"182ea45bca42b4dbd8df02aab99db462\"\n  },\n  {\n    \"url\": \"demo-data/ghidra/pseudocode.json\",\n    \"revision\": \"edc54cf21b995cddcfe51b3c356f21e0\"\n  },\n  {\n    \"url\": \"demo-data/ghidra/strings.json\",\n    \"revision\": \"1919fb250030351a8cfe4e1688bb09a1\"\n  },\n  {\n    \"url\": \"demo-data/nessus/plugins.json\",\n    \"revision\": \"f5ba7eb8ae81e1cd371e11ec6853b5a5\"\n  },\n  {\n    \"url\": \"demo-data/nessus/scanA.json\",\n    \"revision\": \"3d097fe2d79646858a2b466ed68c4a2b\"\n  },\n  {\n    \"url\": \"demo-data/nessus/scanB.json\",\n    \"revision\": \"a9007ea0712792298de427e2ba6c157c\"\n  },\n  {\n    \"url\": \"demo-data/nikto/report.json\",\n    \"revision\": \"faa3a348534b9e215cf06bc058b4485f\"\n  },\n  {\n    \"url\": \"demo-data/nmap/script-db-version.json\",\n    \"revision\": \"858d852324eeb22099de7c35506666f7\"\n  },\n  {\n    \"url\": \"demo-data/nmap/scripts.json\",\n    \"revision\": \"aeaa07aaf23d04ebe3a742486d1dbec0\"\n  },\n  {\n    \"url\": \"demo-data/reaver/aps.json\",\n    \"revision\": \"47a9e4dd430e44fecbf795f0cbbfcfe7\"\n  },\n  {\n    \"url\": \"demo-data/reaver/routers.json\",\n    \"revision\": \"28a8087d5820e1d24603d847685acd36\"\n  },\n  {\n    \"url\": \"demo-data/volatility/memory.json\",\n    \"revision\": \"656524b2202a0123afd20b633b574211\"\n  },\n  {\n    \"url\": \"demo-data/volatility/plugins.json\",\n    \"revision\": \"cff0bf637465a4699c4f7421fc25de5f\"\n  },\n  {\n    \"url\": \"demo/nmap-nse.json\",\n    \"revision\": \"80070e3928b14b3db46a2579370b3378\"\n  },\n  {\n    \"url\": \"demo/nmap-results.json\",\n    \"revision\": \"89cd594cbcaa7d61291cb2a98355cce6\"\n  },\n  {\n    \"url\": \"empty-tasks.svg\",\n    \"revision\": \"be3c593cef9d2b4e2b7690713113064d\"\n  },\n  {\n    \"url\": \"fixtures/hydra-timeline.json\",\n    \"revision\": \"79b282ecd5a99563c5d9e857eba62ef0\"\n  },\n  {\n    \"url\": \"fixtures/metasploit_loot.json\",\n    \"revision\": \"677d69dccd3e3b29183755a623d3d66a\"\n  },\n  {\n    \"url\": \"fixtures/mitre.json\",\n    \"revision\": \"af1fa202d230f5837812c8913425dad1\"\n  },\n  {\n    \"url\": \"fixtures/sample.json\",\n    \"revision\": \"6ec06d23cfb9b9ab62cf247fe18d107d\"\n  },\n  {\n    \"url\": \"fixtures/sigma.json\",\n    \"revision\": \"839beafaceac0705c86d9b7bc9e2f814\"\n  },\n  {\n    \"url\": \"fixtures/suricata.json\",\n    \"revision\": \"66ac5d7ef803b549a7853646b8ad392f\"\n  },\n  {\n    \"url\": \"fixtures/zeek.json\",\n    \"revision\": \"1d0fd5d27deec3b0c9baa3f1090816c7\"\n  },\n  {\n    \"url\": \"hook-flow.svg\",\n    \"revision\": \"29000bd1b8a0e67e50283d629cfd92d6\"\n  },\n  {\n    \"url\": \"images/logos/fevicon.png\",\n    \"revision\": \"83f01aa7eac666f4c6c873cfdf838e43\"\n  },\n  {\n    \"url\": \"images/logos/fevicon.svg\",\n    \"revision\": \"b51e6e02c0f989a1df908d2de4f0a291\"\n  },\n  {\n    \"url\": \"images/logos/logo_1024.png\",\n    \"revision\": \"0524d87dbd1bc2749829bd0a36583625\"\n  },\n  {\n    \"url\": \"images/logos/logo_1200.png\",\n    \"revision\": \"0524d87dbd1bc2749829bd0a36583625\"\n  },\n  {\n    \"url\": \"images/logos/logo.png\",\n    \"revision\": \"7b2d4b31e4546c3b17a5787c5d669fe3\"\n  },\n  {\n    \"url\": \"images/logos/New folder/fevicon.png\",\n    \"revision\": \"cd0dc56c1941b14e3eb070b7f86b2d3a\"\n  },\n  {\n    \"url\": \"images/logos/New folder/fevicon.svg\",\n    \"revision\": \"f16a7190c9b9347a39432c5cecb0efb3\"\n  },\n  {\n    \"url\": \"images/logos/New folder/logo_1024.png\",\n    \"revision\": \"7803d06afa34c7205abf44b51a72ced9\"\n  },\n  {\n    \"url\": \"images/logos/search.png\",\n    \"revision\": \"7efb988febb4a9d0706e458ee322d728\"\n  },\n  {\n    \"url\": \"module-report.html\",\n    \"revision\": \"15340b1b787edb7200fcde792c6026f7\"\n  },\n  {\n    \"url\": \"offline.html\",\n    \"revision\": \"af5fbf0a1a58f8faec699bdafad978e9\"\n  },\n  {\n    \"url\": \"pacman-levels.json\",\n    \"revision\": \"d3c0b2b731ed4c370152d7d4ed43d6ee\"\n  },\n  {\n    \"url\": \"pieces/bB.svg\",\n    \"revision\": \"cb69fc1a80edd0241466c0d47b116db2\"\n  },\n  {\n    \"url\": \"pieces/bK.svg\",\n    \"revision\": \"e3451fff6ecf0fcd6de9217ccec6ba84\"\n  },\n  {\n    \"url\": \"pieces/bN.svg\",\n    \"revision\": \"7b95d1a433d0a64a1e34ed69ca8ad127\"\n  },\n  {\n    \"url\": \"pieces/bP.svg\",\n    \"revision\": \"876f1ece4514c9b19b748e5b985e74f2\"\n  },\n  {\n    \"url\": \"pieces/bQ.svg\",\n    \"revision\": \"8e8aadb6f4a4229d3cb0650301f5a9fd\"\n  },\n  {\n    \"url\": \"pieces/bR.svg\",\n    \"revision\": \"9a79237a3c4acee7893525f1bfc456ca\"\n  },\n  {\n    \"url\": \"pieces/wB.svg\",\n    \"revision\": \"b99f3830dcbf60642c26befe1514ebbc\"\n  },\n  {\n    \"url\": \"pieces/wK.svg\",\n    \"revision\": \"27fd3307056d10dae685faf4ca8f4488\"\n  },\n  {\n    \"url\": \"pieces/wN.svg\",\n    \"revision\": \"b243da7dc2f0791b4b6915ed2091b288\"\n  },\n  {\n    \"url\": \"pieces/wP.svg\",\n    \"revision\": \"e38a4f66149924b57e4617dbbfe10ef7\"\n  },\n  {\n    \"url\": \"pieces/wQ.svg\",\n    \"revision\": \"518cd5f8585dbdb35199fa1edf31979f\"\n  },\n  {\n    \"url\": \"pieces/wR.svg\",\n    \"revision\": \"0095917f84de3487e19f9d8d46876859\"\n  },\n  {\n    \"url\": \"plugin-marketplace.json\",\n    \"revision\": \"12e32b6571392d6aed85fedd9bccafe2\"\n  },\n  {\n    \"url\": \"projects.json\",\n    \"revision\": \"36a96bc799959d29651e318e90fc197a\"\n  },\n  {\n    \"url\": \"quotes.json\",\n    \"revision\": \"38b46cf11d4aa3389916e33f28f722b2\"\n  },\n  {\n    \"url\": \"reconng-chain.json\",\n    \"revision\": \"f02380f7edeb7730c045ee86565d8596\"\n  },\n  {\n    \"url\": \"reconng-marketplace.json\",\n    \"revision\": \"b2e141f448211dfae1e2645727b84f20\"\n  },\n  {\n    \"url\": \"spotify-playlists.json\",\n    \"revision\": \"a406564e9281e2dee11f898b110151dd\"\n  },\n  {\n    \"url\": \"theme.js\",\n    \"revision\": \"7e0ea5d7c63405b0dcf67bb1c32a3fe3\"\n  },\n  {\n    \"url\": \"themes/filetypes/js.png\",\n    \"revision\": \"845442c895006fe4e578c7477c2dc1e6\"\n  },\n  {\n    \"url\": \"themes/filetypes/php.png\",\n    \"revision\": \"b75983d05251a18a62d8580ee0e5be8b\"\n  },\n  {\n    \"url\": \"themes/filetypes/zip.png\",\n    \"revision\": \"b8142b5ab72c5f100a283097b1093059\"\n  },\n  {\n    \"url\": \"themes/Yaru/actions/document-save-as-png-symbolic.svg\",\n    \"revision\": \"9acd1d1a157e43e9af9caa89f792d508\"\n  },\n  {\n    \"url\": \"themes/Yaru/actions/document-save-as-svg-symbolic.svg\",\n    \"revision\": \"78c2b42d3637d156ea8267b945c54014\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/2048.svg\",\n    \"revision\": \"9ff164ff511189302feb33831c130fb6\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/asteroids.svg\",\n    \"revision\": \"3955714174bbc7ac1eae9a7cfd12fd91\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/autopsy.svg\",\n    \"revision\": \"cbd2d94001265eb37d9f651bccea9475\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/bash.png\",\n    \"revision\": \"de070002c6eb333c3bd2f0338616eb1e\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/battleship.svg\",\n    \"revision\": \"4b6c9b0c70fbf55e795d6b9ebce9c93d\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/beef-idle.svg\",\n    \"revision\": \"4a8d6e5868c9dd4112dbc2b3f733462f\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/beef-offline.svg\",\n    \"revision\": \"d819738effa1e72021e4d9bf051f8f09\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/beef-online.svg\",\n    \"revision\": \"c5424024a3a96fa783abf40c08d031d8\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/beef.svg\",\n    \"revision\": \"caa799be8f7206208939e84e5bc10a58\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/blackjack.svg\",\n    \"revision\": \"5147883d3fb6884ad503568083158ce6\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/bluetooth.svg\",\n    \"revision\": \"8f1d213369946eda05f36032036fb819\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/breakout.svg\",\n    \"revision\": \"313f1dbded99cef28dc586448c093630\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/calc.png\",\n    \"revision\": \"ac1dd9e70fa9b7578a3b18f36a0120c4\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/candy-crush.svg\",\n    \"revision\": \"1bf04859f5a76f960a9ed5c29da44117\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/car-racer.svg\",\n    \"revision\": \"c9591d8c9f0e2119b07518d083a76e14\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/checkers.svg\",\n    \"revision\": \"4439e043bf5524d00acae97b7db9bfda\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/chess.svg\",\n    \"revision\": \"063aff6ab78834c03bc4199ebbf85ea0\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/chrome.png\",\n    \"revision\": \"f388200569fc71dbe2d75dbf1c8a89e2\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/connect-four.svg\",\n    \"revision\": \"a5a749474ce638cd4e49d58f433dc3ee\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/dsniff.svg\",\n    \"revision\": \"3e56efae5703ccc9cf9acfbe03fdf825\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/ettercap.svg\",\n    \"revision\": \"cc86981aa8cbf62f744eb79623859896\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/flappy-bird.svg\",\n    \"revision\": \"5bc5ca02b2f3aef3d3fd73c757fd0fa1\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/frogger.svg\",\n    \"revision\": \"4537401f7579f57627748437693d1acb\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/ftp.svg\",\n    \"revision\": \"00dbbc59241e6671f6f1438328a68747\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/game.svg\",\n    \"revision\": \"b6465870d254c07f0bb81bff0ac61d7b\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/gedit.png\",\n    \"revision\": \"5bf59fed3883ce94b737fbf534d06c5b\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/ghidra.svg\",\n    \"revision\": \"dda81ad080be638820cd1abc9e92d36a\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/gnome-control-center.png\",\n    \"revision\": \"1b68649c0534c3caa633702e57ab2f35\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/gomoku.svg\",\n    \"revision\": \"6e214118cb97b32184a3d4aba0d5e9c8\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/hangman.svg\",\n    \"revision\": \"d4dd68e3cf8b5724e6c124bf7ec3019e\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/hashcat.svg\",\n    \"revision\": \"b3f5a51a5dfed46074f73af16914fb15\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/http.svg\",\n    \"revision\": \"ae45ebbdbd5e30ed1c9da2f9bb70ab03\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/hydra.svg\",\n    \"revision\": \"d0319affaf76e1a05eac9a9a3bc76ce4\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/input-lab.svg\",\n    \"revision\": \"956544738615febeb282df834f616844\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/john.svg\",\n    \"revision\": \"6870605c625d28b2cc1d6197c97742ce\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/kismet.svg\",\n    \"revision\": \"18588a7039b1b14cb065e55e1840d6d6\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/memory.svg\",\n    \"revision\": \"2178095328c0a20face0ce9b3a999f8e\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/metasploit.svg\",\n    \"revision\": \"cbca1e192b5dedc4fd9866918d9813b2\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/mimikatz.svg\",\n    \"revision\": \"d5898ebb5508ddce9441befc461152ff\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/minesweeper.svg\",\n    \"revision\": \"238830dfa36556884ef6b6dacde6eaa4\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/msf-post.svg\",\n    \"revision\": \"b99a3d73de62786fe2f2545614dcf451\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/nessus.svg\",\n    \"revision\": \"465826ea7ec6c9555bae574e4140d5c2\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/nikto.svg\",\n    \"revision\": \"47e58d59bb7950085f6d04c51c4cc65f\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/nmap-nse.svg\",\n    \"revision\": \"71325faa970b50a6dbc17f8865f3e13e\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/nonogram.svg\",\n    \"revision\": \"79c18917586402cc96fbd28d20eac94a\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/openvas.svg\",\n    \"revision\": \"a76ba274f666c606058e72861a3f63da\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/pacman.svg\",\n    \"revision\": \"43c765c2f19bfa2737be0e4667bc7aad\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/platformer.svg\",\n    \"revision\": \"cd45f27b394c930d8d61a6d54a8248b3\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/pong.svg\",\n    \"revision\": \"4a99dfa68abaa6368c028a4827018590\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/project-gallery.svg\",\n    \"revision\": \"2cc2a9d838e962f8de4886865324164b\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/qr.svg\",\n    \"revision\": \"40e7e6e1f343315ae0187135a5d5b52a\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/quote.svg\",\n    \"revision\": \"f278ec4a438b36737b491e4bb8cb138d\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/radar-symbolic.svg\",\n    \"revision\": \"481f1fe33b2fffb3c11eef18caedd4a0\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/radare2.svg\",\n    \"revision\": \"708d94da3e2f1161dd708187c845d2d4\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/reaver.svg\",\n    \"revision\": \"3de990cc282e849b2efc18a7567ef9ab\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/reconng.svg\",\n    \"revision\": \"b122e44e9c6b214bbc7c4f622e35c983\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/resource-monitor.svg\",\n    \"revision\": \"fac5f97744d1e406de007de46f1018a3\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/reversi.svg\",\n    \"revision\": \"53358776943b940d3c40b1832cdacaaa\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/screen-recorder.svg\",\n    \"revision\": \"3f2d7858f6baee7960f1c987e4126e19\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/simon.svg\",\n    \"revision\": \"7230e98b537050c3673c25feb13d6598\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/snake.svg\",\n    \"revision\": \"a5b1a6f3ab1fc829d90ae9a195c0f7b7\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/sokoban.svg\",\n    \"revision\": \"e630ae613e3cd19ee9e4db43e0adadfc\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/solitaire.svg\",\n    \"revision\": \"4af9c1555939f82b4144edb240a70497\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/space-invaders.svg\",\n    \"revision\": \"e55e6bc1d177458bbc18509f0164435e\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/spotify.svg\",\n    \"revision\": \"cc245e2ade6ce8d3c1475102155a4ebb\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/ssh.svg\",\n    \"revision\": \"c5a1af24bfc4a6c1ea8fb9083d85d1e5\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/sudoku.svg\",\n    \"revision\": \"68189a74fae0f5917704311fc2d0cf7c\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/tetris.svg\",\n    \"revision\": \"a6146e0c143f958cb10cf39d51ac3a94\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/tictactoe.svg\",\n    \"revision\": \"f61df0f1027a8c5c036a32bcda88a070\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/todoist.png\",\n    \"revision\": \"0399289aacd0381bc17e6d20c6f9a797\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/tower-defense.svg\",\n    \"revision\": \"f3a4ead8c0d1c3c6db9e589ce150e019\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/volatility.svg\",\n    \"revision\": \"a45bfceb5a9074b428dfb0f119ebaaf6\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/vscode.png\",\n    \"revision\": \"19f8f6b532ff362479a60765da0836f0\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/weather.svg\",\n    \"revision\": \"baba5539720e19238ed0341c266479bb\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/wireshark.svg\",\n    \"revision\": \"74e18416758dc13b4fbface94bbd084f\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/word-search.svg\",\n    \"revision\": \"aa4d54bbf6f54889f386aec0b2e310f0\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/wordle.svg\",\n    \"revision\": \"3b3097d70a7bc022cbec026cbcdbca34\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/x.png\",\n    \"revision\": \"98907f7360e787bcc2a125e0f3fadfd6\"\n  },\n  {\n    \"url\": \"themes/Yaru/apps/youtube.svg\",\n    \"revision\": \"a73368ca85da47d732bdab43be8cc29c\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/about.svg\",\n    \"revision\": \"402cc8f50f9095bea9d69089971ff00b\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/audio-headphones-symbolic.svg\",\n    \"revision\": \"254c0366ce02c23054cdaed5310e147b\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/audio-volume-medium-symbolic.svg\",\n    \"revision\": \"0afc8a80f2c468175105b63d5ab3fc61\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/battery-good-symbolic.svg\",\n    \"revision\": \"a3e3473eb97ebb655d18a33abe06fd80\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/bluetooth-symbolic.svg\",\n    \"revision\": \"aa5791a4b72f6009dbc961f5a37f3823\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/changes-prevent-symbolic.svg\",\n    \"revision\": \"2f573bb58ad3303faf60f9878206b28e\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/chrome_home.svg\",\n    \"revision\": \"2ee4b5c0f8a4e3c0d3bbd5da7d321489\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/chrome_refresh.svg\",\n    \"revision\": \"a57189b43b9bee01f755c12299a5cf64\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/cof_orange_hex.svg\",\n    \"revision\": \"50eef7f915d5a35f6ddacc4c93683ac9\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/contact.svg\",\n    \"revision\": \"bd1c831ba461158d2be374c4088deb03\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/decompiler-symbolic.svg\",\n    \"revision\": \"336dd965a39a1c74d728a312c1643cde\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/display-brightness-symbolic.svg\",\n    \"revision\": \"b22a4769111cd82324451571e3d35182\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/download.svg\",\n    \"revision\": \"427e499d45e8353f2e5b9bc3172f0391\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/education.svg\",\n    \"revision\": \"a2a07a30acf656dcc91d60dfcebd0ac6\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/emblem-system-symbolic.svg\",\n    \"revision\": \"a17e0bc603758891e5dedf4e5e4870b5\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/experience.svg\",\n    \"revision\": \"a26d9092ccfd026c512f868874eb99df\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/icons8-kali-linux.svg\",\n    \"revision\": \"dfcad67012f9dce0d2d774229a4989aa\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/network-wireless-signal-good-symbolic.svg\",\n    \"revision\": \"4ebbf5940a3d313d581690e7c2258784\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/network-wireless-signal-none-symbolic.svg\",\n    \"revision\": \"83b03d7d13b166b044057edd4e094953\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/New folder/ubuntu_white_hex.svg\",\n    \"revision\": \"63c0903a6da85bbc4774748342b53cb1\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/power-button.svg\",\n    \"revision\": \"c87b2f4e59c32c353479a38c9f20823c\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/process-working-symbolic.svg\",\n    \"revision\": \"254433490bdfd88ef1ee40ed49cae138\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/projects.svg\",\n    \"revision\": \"b98b896411907c7b8c230fe32d2e7661\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/skills.svg\",\n    \"revision\": \"608c6e4b014c118f0167c163e6dd191d\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/system-shutdown-symbolic.svg\",\n    \"revision\": \"ea3558a34cd15f81cb92ccd906820080\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/ubuntu_white_hex.svg\",\n    \"revision\": \"0fc601fcb9773a42578ab7f250d15587\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/user-trash-full-symbolic.svg\",\n    \"revision\": \"e580795935be788fbdc13d35af1c8b9b\"\n  },\n  {\n    \"url\": \"themes/Yaru/status/user-trash-symbolic.svg\",\n    \"revision\": \"60bbe8163825188ec01bd249e7d5e2b3\"\n  },\n  {\n    \"url\": \"themes/Yaru/system/folder.png\",\n    \"revision\": \"078d046df9461fa25879726d0f6b0912\"\n  },\n  {\n    \"url\": \"themes/Yaru/system/old system/folder.png\",\n    \"revision\": \"7b7bfb6eec4c23a9d09ed2baa10337b6\"\n  },\n  {\n    \"url\": \"themes/Yaru/system/old system/user-desktop.png\",\n    \"revision\": \"9747fe6b36c47da707130c78f12b7331\"\n  },\n  {\n    \"url\": \"themes/Yaru/system/old system/user-home.png\",\n    \"revision\": \"ce230275c0c2a35563fd5c21d5577f4f\"\n  },\n  {\n    \"url\": \"themes/Yaru/system/old system/user-trash-full.png\",\n    \"revision\": \"be0fe1d854f2cabd84bba1eea9438da0\"\n  },\n  {\n    \"url\": \"themes/Yaru/system/old system/view-app-grid-symbolic.svg\",\n    \"revision\": \"e7c8d04948a2eac7f4ddd5a89326d7d7\"\n  },\n  {\n    \"url\": \"themes/Yaru/system/user-desktop.png\",\n    \"revision\": \"82e5a5842351f856e097a598464b3f73\"\n  },\n  {\n    \"url\": \"themes/Yaru/system/user-home.png\",\n    \"revision\": \"2f853e74536cf427946e312fe0c430e8\"\n  },\n  {\n    \"url\": \"themes/Yaru/system/user-trash-full.png\",\n    \"revision\": \"be0fe1d854f2cabd84bba1eea9438da0\"\n  },\n  {\n    \"url\": \"themes/Yaru/system/view-app-grid-symbolic.svg\",\n    \"revision\": \"e7c8d04948a2eac7f4ddd5a89326d7d7\"\n  },\n  {\n    \"url\": \"themes/Yaru/window/window-close-symbolic.svg\",\n    \"revision\": \"d59524b2db7021fea48c4128d24311b6\"\n  },\n  {\n    \"url\": \"themes/Yaru/window/window-maximize-symbolic.svg\",\n    \"revision\": \"45cc8b7b6b7f949bb7d0df87cd281902\"\n  },\n  {\n    \"url\": \"themes/Yaru/window/window-minimize-symbolic.svg\",\n    \"revision\": \"6fc037b39a09847a56d14e737004faac\"\n  },\n  {\n    \"url\": \"themes/Yaru/window/window-pin-symbolic.svg\",\n    \"revision\": \"1678618c30fbcec592d17d4a12043a9b\"\n  },\n  {\n    \"url\": \"themes/Yaru/window/window-restore-symbolic.svg\",\n    \"revision\": \"b0bc439cb6565a5f7d06ac77ae249441\"\n  },\n  {\n    \"url\": \"workers/service-worker.js\",\n    \"revision\": \"eea63b088aba3c5c2959540b65f89f4d\"\n  }\n], {});\n\nworkbox_routing_registerRoute(new workbox_routing_NavigationRoute(workbox_precaching_createHandlerBoundToURL(\"/offline.html\")));\n\n\nworkbox_routing_registerRoute(({ request }) => request.destination === 'document', new workbox_strategies_NetworkFirst({ \"cacheName\":\"pages\", plugins: [] }), 'GET');\n\n\n\n\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * {@link workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * *Note*: These RegExps may be evaluated against every destination URL during\n     * a navigation. Avoid using\n     * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\n     * or else your users may see delays when navigating your site.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` + `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler,\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return ((await handler.waitUntil(Promise.race(promises))) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                (await networkPromise));\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler, }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n"],"names":["self","_","e","messageGenerator","fallback","code","args","msg","length","JSON","stringify","WorkboxError","Error","constructor","errorCode","details","super","this","name","normalizeHandler","handler","handle","Route","match","method","setCatchHandler","catchHandler","RegExpRoute","regExp","url","result","exec","href","origin","location","index","slice","Router","_routes","Map","_defaultHandlerMap","routes","addFetchListener","addEventListener","event","request","responsePromise","handleRequest","respondWith","addCacheListener","data","type","payload","requestPromises","Promise","all","urlsToCache","map","entry","Request","waitUntil","ports","then","postMessage","URL","protocol","startsWith","sameOrigin","params","route","findMatchingRoute","has","get","err","reject","_catchHandler","catch","async","catchErr","matchResult","Array","isArray","Object","keys","undefined","setDefaultHandler","set","registerRoute","push","unregisterRoute","routeIndex","indexOf","splice","defaultRouter","getOrCreateDefaultRouter","capture","captureUrl","matchCallback","RegExp","moduleName","funcName","paramName","cacheOkAndOpaquePlugin","cacheWillUpdate","response","status","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","join","cacheNames","userCacheName","stripParams","fullURL","ignoreParams","strippedURL","param","searchParams","delete","Deferred","promise","resolve","quotaErrorCallbacks","Set","toRequest","input","StrategyHandler","strategy","options","_cacheKeys","assign","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","plugin","fetch","mode","FetchEvent","preloadResponse","possiblePreloadResponse","originalRequest","hasCallback","clone","cb","iterateCallbacks","thrownErrorMessage","message","pluginFilteredRequest","fetchResponse","fetchOptions","callback","error","runCallbacks","fetchAndCachePut","responseClone","cachePut","cacheMatch","key","cachedResponse","matchOptions","effectiveRequest","getCacheKey","multiMatchOptions","caches","ms","setTimeout","String","replace","responseToCache","_ensureResponseSafeToCache","cache","open","hasCacheUpdateCallback","oldResponse","strippedRequestURL","keysOptions","ignoreSearch","cacheKeys","cacheKey","cacheMatchIgnoreParams","put","executeQuotaErrorCallbacks","newResponse","state","statefulCallback","statefulParam","doneWaiting","shift","destroy","pluginsUsed","Strategy","responseDone","handleAll","_getResponse","_awaitComplete","_handle","waitUntilError","asyncFn","returnPromise","createCacheKey","urlObject","revision","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","cachedResponseWillBeUsed","PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","_precacheController","getCacheKeyForURL","headers","supportStatus","copyResponse","modifier","clonedResponse","responseInit","Headers","statusText","modifiedResponseInit","body","testResponse","Response","canConstructResponseFromBodyStream","blob","PrecacheStrategy","_fallbackToNetwork","fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","_handleInstall","_handleFetch","integrityInManifest","integrity","integrityInRequest","noIntegrityConflict","_useDefaultCacheabilityPluginIfNeeded","defaultPluginIndex","cacheWillUpdatePluginCount","entries","defaultPrecacheCacheabilityPlugin","redirected","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","install","bind","activate","addToCacheList","_installAndActiveListenersAdded","urlsToWarnAbout","cacheMode","firstEntry","secondEntry","warningMessage","console","warn","installReportPlugin","credentials","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","getURLsToCacheKeys","getCachedURLs","getIntegrityForCacheKey","matchPrecache","createHandlerBoundToURL","getOrCreatePrecacheController","PrecacheRoute","urlsToCacheKeys","possibleURL","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","some","test","removeIgnoredSearchParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","generateURLVariations","importScripts","skipWaiting","clients","claim","addRoute","workbox_routing_registerRoute","allowlist","denylist","_match","_allowlist","_denylist","pathnameAndSearch","search","destination","p","unshift","_networkTimeoutSeconds","networkTimeoutSeconds","logs","promises","timeoutId","id","_getTimeoutPromise","networkPromise","_getNetworkPromise","race","fetchError","clearTimeout"],"mappings":"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CACPwL,SAAY,oCAEd,CACExL,IAAO,qCACPwL,SAAY,oCAEd,CACExL,IAAO,sCACPwL,SAAY,oCAEd,CACExL,IAAO,sCACPwL,SAAY,oCAEd,CACExL,IAAO,0BACPwL,SAAY,oCAEd,CACExL,IAAO,6BACPwL,SAAY,oCAEd,CACExL,IAAO,uBACPwL,SAAY,oCAEd,CACExL,IAAO,oBACPwL,SAAY,oCAEd,CACExL,IAAO,yBACPwL,SAAY,oCAEd,CACExL,IAAO,sBACPwL,SAAY,oCAEd,CACExL,IAAO,oBACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,qBACPwL,SAAY,oCAEd,CACExL,IAAO,kCACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,4BACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,6BACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,oCACPwL,SAAY,oCAEd,CACExL,IAAO,mCACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,wCACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,4BACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,mCACPwL,SAAY,oCAEd,CACExL,IAAO,oCACPwL,SAAY,oCAEd,CACExL,IAAO,qBACPwL,SAAY,oCAEd,CACExL,IAAO,yBACPwL,SAAY,oCAEd,CACExL,IAAO,kBACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,sBACPwL,SAAY,oCAEd,CACExL,IAAO,uBACPwL,SAAY,oCAEd,CACExL,IAAO,sBACPwL,SAAY,oCAEd,CACExL,IAAO,yBACPwL,SAAY,oCAEd,CACExL,IAAO,qBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,2BACPwL,SAAY,oCAEd,CACExL,IAAO,2BACPwL,SAAY,oCAEd,CACExL,IAAO,6BACPwL,SAAY,oCAEd,CACExL,IAAO,6BACPwL,SAAY,oCAEd,CACExL,IAAO,wBACPwL,SAAY,oCAEd,CACExL,IAAO,sCACPwL,SAAY,oCAEd,CACExL,IAAO,sCACPwL,SAAY,oCAEd,CACExL,IAAO,wCACPwL,SAAY,oCAEd,CACExL,IAAO,0BACPwL,SAAY,oCAEd,CACExL,IAAO,qBACPwL,SAAY,oCAEd,CACExL,IAAO,eACPwL,SAAY,oCAEd,CACExL,IAAO,qBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,0BACPwL,SAAY,oCAEd,CACExL,IAAO,gBACPwL,SAAY,oCAEd,CACExL,IAAO,cACPwL,SAAY,oCAEd,CACExL,IAAO,qBACPwL,SAAY,oCAEd,CACExL,IAAO,2BACPwL,SAAY,oCAEd,CACExL,IAAO,yBACPwL,SAAY,oCAEd,CACExL,IAAO,WACPwL,SAAY,oCAEd,CACExL,IAAO,0BACPwL,SAAY,oCAEd,CACExL,IAAO,2BACPwL,SAAY,oCAEd,CACExL,IAAO,2BACPwL,SAAY,oCAEd,CACExL,IAAO,wDACPwL,SAAY,oCAEd,CACExL,IAAO,wDACPwL,SAAY,oCAEd,CACExL,IAAO,4BACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,4BACPwL,SAAY,oCAEd,CACExL,IAAO,kCACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,oCACPwL,SAAY,oCAEd,CACExL,IAAO,mCACPwL,SAAY,oCAEd,CACExL,IAAO,4BACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,4BACPwL,SAAY,oCAEd,CACExL,IAAO,mCACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,6BACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,oCACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,mCACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,2BACPwL,SAAY,oCAEd,CACExL,IAAO,4BACPwL,SAAY,oCAEd,CACExL,IAAO,6BACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,4CACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,4BACPwL,SAAY,oCAEd,CACExL,IAAO,6BACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,4BACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,kCACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,mCACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,6BACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,kCACPwL,SAAY,oCAEd,CACExL,IAAO,4BACPwL,SAAY,oCAEd,CACExL,IAAO,uCACPwL,SAAY,oCAEd,CACExL,IAAO,0BACPwL,SAAY,oCAEd,CACExL,IAAO,6BACPwL,SAAY,oCAEd,CACExL,IAAO,sCACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,wCACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,uCACPwL,SAAY,oCAEd,CACExL,IAAO,6BACPwL,SAAY,oCAEd,CACExL,IAAO,6BACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,sCACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,2BACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,qCACPwL,SAAY,oCAEd,CACExL,IAAO,kCACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,mCACPwL,SAAY,oCAEd,CACExL,IAAO,8BACPwL,SAAY,oCAEd,CACExL,IAAO,yBACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,+BACPwL,SAAY,oCAEd,CACExL,IAAO,mDACPwL,SAAY,oCAEd,CACExL,IAAO,sDACPwL,SAAY,oCAEd,CACExL,IAAO,+CACPwL,SAAY,oCAEd,CACExL,IAAO,4CACPwL,SAAY,oCAEd,CACExL,IAAO,kDACPwL,SAAY,oCAEd,CACExL,IAAO,qCACPwL,SAAY,oCAEd,CACExL,IAAO,wCACPwL,SAAY,oCAEd,CACExL,IAAO,wCACPwL,SAAY,oCAEd,CACExL,IAAO,iCACPwL,SAAY,oCAEd,CACExL,IAAO,6CACPwL,SAAY,oCAEd,CACExL,IAAO,qDACPwL,SAAY,oCAEd,CACExL,IAAO,kCACPwL,SAAY,oCAEd,CACExL,IAAO,mCACPwL,SAAY,oCAEd,CACExL,IAAO,gDACPwL,SAAY,oCAEd,CACExL,IAAO,oCACPwL,SAAY,oCAEd,CACExL,IAAO,2CACPwL,SAAY,oCAEd,CACExL,IAAO,+DACPwL,SAAY,oCAEd,CACExL,IAAO,+DACPwL,SAAY,oCAEd,CACExL,IAAO,qDACPwL,SAAY,oCAEd,CACExL,IAAO,sCACPwL,SAAY,oCAEd,CACExL,IAAO,kDACPwL,SAAY,oCAEd,CACExL,IAAO,kCACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,kDACPwL,SAAY,oCAEd,CACExL,IAAO,0CACPwL,SAAY,oCAEd,CACExL,IAAO,kDACPwL,SAAY,oCAEd,CACExL,IAAO,6CACPwL,SAAY,oCAEd,CACExL,IAAO,gCACPwL,SAAY,oCAEd,CACExL,IAAO,2CACPwL,SAAY,oCAEd,CACExL,IAAO,iDACPwL,SAAY,oCAEd,CACExL,IAAO,8CACPwL,SAAY,oCAEd,CACExL,IAAO,oDACPwL,SAAY,oCAEd,CACExL,IAAO,2DACPwL,SAAY,oCAEd,CACExL,IAAO,sCACPwL,SAAY,oCAEd,CACExL,IAAO,mCACPwL,SAAY,oCAEd,CACExL,IAAO,yCACPwL,SAAY,oCAEd,CACExL,IAAO,gDACPwL,SAAY,oCAEd,CACExL,IAAO,+CACPwL,SAAY,oCAEd,CACExL,IAAO,kDACPwL,SAAY,oCAEd,CACExL,IAAO,kDACPwL,SAAY,oCAEd,CACExL,IAAO,6CACPwL,SAAY,oCAEd,CACExL,IAAO,iDACPwL,SAAY,oCAEd,CACExL,IAAO,4BACPwL,SAAY,sCGx4BhB,SAAkB5E,GACd,MAAMqF,EAAqB6D,IAE3BpM,EADsB,IAAIqM,EAAc9D,EAAoBrF,GAEhE,CLHI0K,CAAS1K,GE24Bb2K,EAA8B,II34B9B,cAA8B9R,EAyB1BT,WAAAA,CAAYO,GAASiS,UAAEA,EAAY,CAAC,KAAIC,SAAEA,EAAW,IAAO,IAexDtS,MAAOyH,GAAYxH,KAAKsS,EAAO9K,GAAUrH,GACzCH,KAAKuS,EAAaH,EAClBpS,KAAKwS,EAAYH,CACrB,CAWAC,CAAAA,EAAO1R,IAAEA,EAAGgB,QAAEA,IACV,GAAIA,GAA4B,aAAjBA,EAAQuG,KACnB,OAAO,EAEX,MAAMsK,EAAoB7R,EAAI2Q,SAAW3Q,EAAI8R,OAC7C,IAAK,MAAM/R,KAAUX,KAAKwS,EACtB,GAAI7R,EAAO0Q,KAAKoB,GAMZ,OAAO,EAGf,QAAIzS,KAAKuS,EAAWnB,KAAMzQ,GAAWA,EAAO0Q,KAAKoB,GAYrD,ILjF6B7R,EC24B4E,gBD14B9E8P,IACDD,wBAAwB7P,MC44BtDuR,EAA8B,EAAGvQ,aAAsC,aAAxBA,EAAQ+Q,YAA4B,IK14BnF,cAA2BlH,EAoBvB7L,WAAAA,CAAY4H,EAAU,IAClBzH,MAAMyH,GAGDxH,KAAK+H,QAAQqJ,KAAMwB,GAAM,oBAAqBA,IAC/C5S,KAAK+H,QAAQ8K,QAAQxN,GAEzBrF,KAAK8S,EAAyBtL,EAAQuL,uBAAyB,CAWnE,CAQA,OAAMjH,CAAQlK,EAASzB,GACnB,MAAM6S,EAAO,GASPC,EAAW,GACjB,IAAIC,EACJ,GAAIlT,KAAK8S,EAAwB,CAC7B,MAAMK,GAAEA,EAAEnM,QAAEA,GAAYhH,KAAKoT,EAAmB,CAAExR,UAASoR,OAAM7S,YACjE+S,EAAYC,EACZF,EAAS1O,KAAKyC,EAClB,CACA,MAAMqM,EAAiBrT,KAAKsT,EAAmB,CAC3CJ,YACAtR,UACAoR,OACA7S,YAEJ8S,EAAS1O,KAAK8O,GACd,MAAM9N,QAAiBpF,EAAQwC,UAAU,gBAEtBxC,EAAQwC,UAAUN,QAAQkR,KAAKN,WAMnCI,EAR0B,IAkBzC,IAAK9N,EACD,MAAM,IAAI7F,EAAa,cAAe,CAAEkB,IAAKgB,EAAQhB,MAEzD,OAAO2E,CACX,CAUA6N,CAAAA,EAAmBxR,QAAEA,EAAOoR,KAAEA,EAAI7S,QAAEA,IAChC,IAAI+S,EAWJ,MAAO,CACHlM,QAXmB,IAAI3E,QAAS4E,IAQhCiM,EAAYlJ,WAPapG,UAKrBqD,QAAc9G,EAAQoJ,WAAW3H,KAEkC,IAA9B5B,KAAK8S,KAI9CK,GAAID,EAEZ,CAWA,OAAMI,EAAmBJ,UAAEA,EAAStR,QAAEA,EAAOoR,KAAEA,EAAI7S,QAAEA,IACjD,IAAI+I,EACA3D,EACJ,IACIA,QAAiBpF,EAAQiJ,iBAAiBxH,EAC9C,CACA,MAAO4R,GACCA,aAAsB7T,QACtBuJ,EAAQsK,EAEhB,CAwBA,OAvBIN,GACAO,aAAaP,IAWbhK,GAAU3D,IACVA,QAAiBpF,EAAQoJ,WAAW3H,IAUjC2D,CACX,GLsuBmH,CAAEW,UAAY,QAAS6B,QAAS,KAAO"}