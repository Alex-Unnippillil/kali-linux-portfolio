{
  "generatedAt": "2025-09-19T05:23:05.524Z",
  "docs": [
    {
      "slug": "tasks",
      "title": "Application Task List",
      "categories": [
        "Tasks",
        "Testing"
      ],
      "excerpt": "Application Task List This document tracks planned improvements and new features for the desktop portfolio apps. Foundation Add dynamic app factory at utils/createDynamicApp.js to unify dynamic…",
      "markdown": "# Application Task List\n\nThis document tracks planned improvements and new features for the desktop portfolio apps.\n\n## Foundation\n- Add dynamic app factory at `utils/createDynamicApp.js` to unify dynamic imports and GA events.\n- Replace app imports in `apps.config.js` with the factory and `createDisplay` helper.\n- Register apps and games uniformly with `display*` helpers and small default window sizes.\n- Ensure new utilities have Jest tests mirroring existing ones.\n- Fix terminal build by importing `@xterm/xterm/css/xterm.css` and registering `FitAddon`.\n- Follow `docs/new-app-checklist.md` for all new apps.\n\n## Desktop Apps\n### Google Chrome\n- Convert component to pure JS.\n- Implement address bar with history management and persistent bookmarks.\n- Support \"Open in window\" and \"Open in tab\" modes; persist last URL per window.\n- Export default `Chrome` and `displayChrome` via factory.\n\n### Calc\n- Replace button-only logic with tokenizer and shunting-yard evaluator for operator precedence.\n- Add keyboard support, memory registers (M+, M−, MR), and history stored in `localStorage`.\n- Register with `createDynamicApp('calc','Calc')` and export `displayCalc`.\n\n### Terminal\n- Import `@xterm/xterm/css/xterm.css` and `FitAddon`; call `fitAddon.fit()` on mount and resize.\n- Implement command registry (`help`, `ls`, `cat`, `clear`, `open <app>`, `about`, `date`).\n- Add paste support, auto-complete, and scrollback limit.\n- Keep client-only dynamic import.\n\n### Visual Studio Code\n- App now embeds a StackBlitz IDE via iframe instead of a local Monaco editor.\n\n### X\n- Implement read-only timeline embed with SSR disabled and light/dark toggle.\n\n### Spotify\n- Use embed player for public tracks with editable playlist JSON and mini-player mode.\n\n### YouTube\n- Add search and watch view with click-to-load embeds.\n- Store \"recently watched\" in `localStorage`.\n- Add a basic component test similar to existing ones.\n\n## Security Tool Simulators\nImplement safe, non-executing simulators for each tool. Features:\n- Load sample outputs from JSON fixtures and explain them.\n- Provide command builder UI that crafts strings but never runs them.\n- Show \"For lab use only\" banner and optional \"enable lab mode\" flag (off by default).\n\nTools to cover: **BeEF, Ettercap, Metasploit, Wireshark, Kismet, Nikto, Autopsy, Nessus, Hydra, Nmap NSE, Radare2, Volatility, Hashcat, Metasploit Post, dsniff, John the Ripper, OpenVAS, Recon-ng, Ghidra, Mimikatz, Reaver**.\n\n## Other Apps\n### About Alex\n- Replace static content with resume widget loaded from JSON; show skills as chips and project links.\n\n### Settings\n- Add theme picker, wallpaper selector, and \"reset desktop\" clearing `localStorage` in `settingsStore.js`.\n\n### Resource Monitor\n- Display `performance.memory` data and FPS from `performance.now()` deltas.\n- Show CPU synthetic load graph using `requestAnimationFrame` buckets.\n\n### Project Gallery\n- Load projects from `projects.json`; add filters and buttons for repo and live demo.\n\n### Todoist\n- Implement local task manager with sections, due dates, drag-drop ordering, and quick-add shortcut.\n- Persist tasks in `localStorage`.\n\n### Trash\n- Soft-delete files from virtual FS with restore or empty options; store original path metadata.\n\n### Contact Me\n- Simple form posting to dummy endpoint with client-side validation and privacy note.\n\n### Converter\n- Centralize unit mappings in `components/apps/converter/units.js` and maintain test coverage.\n\n### QR Tool\n- Add camera select drop-down and \"download QR\" button after generation.\n\n### ASCII Art\n- Support text-to-ASCII and image-to-ASCII via hidden canvas sampling.\n\n### Figlet\n- Provide font selector, copy-to-clipboard, and cache fonts in IndexedDB.\n\n### Quote Generator\n- Use offline JSON quotes with tags and \"no repeats\" option.\n\n### Weather\n- Show fake data with city picker and unit toggle, or accept user-provided API key in settings.\n\n## Games\nFor each game below, build a canvas-based component with `requestAnimationFrame` game loop, `reset()` function, pause, sound toggle, small default window size, and localStorage highscores. Register each with `createDynamicApp('<name>','<Title>')` and `createDisplay`.\n\n- 2048\n- Asteroids\n- Battleship\n- Blackjack\n- Breakout\n- Car Racer\n- Checkers\n- Chess\n- Connect Four\n- Frogger\n- Hangman: add found words list, timer, difficulty.\n- Memory\n- Minesweeper\n- Pacman\n- Platformer\n- Pong\n- Reversi\n- Simon\n- Snake\n- Sokoban\n- Solitaire\n- Tic Tac Toe\n- Tetris\n- Tower Defense\n- Word Search: enhance with found words list, timer, difficulty.\n- Nonogram\n- Space Invaders\n- Sudoku\n- Flappy Bird\n- Pinball\n\n## Housekeeping\n- Keep `apps.config.js` organized with utilities and games grouped and exported consistently.\n- Monitor `fast-glob` updates and explore hash optimizations for the custom service worker.\n\n",
      "searchText": "application task list this document tracks planned improvements and new features for the desktop portfolio apps. foundation add dynamic app factory at utils/createdynamicapp.js to unify dynamic imports and ga events. replace app imports in apps.config.js with the factory and createdisplay helper. register apps and games uniformly with display* helpers and small default window sizes. ensure new utilities have jest tests mirroring existing ones. fix terminal build by importing @xterm/xterm/css/xterm.css and registering fitaddon . follow docs/new-app-checklist.md for all new apps. desktop apps google chrome convert component to pure js. implement address bar with history management and persistent bookmarks. support &quot;open in window&quot; and &quot;open in tab&quot; modes; persist last url per window. export default chrome and displaychrome via factory. calc replace button-only logic with tokenizer and shunting-yard evaluator for operator precedence. add keyboard support, memory registers (m+, m−, mr), and history stored in localstorage . register with createdynamicapp(&#39;calc&#39;,&#39;calc&#39;) and export displaycalc . terminal import @xterm/xterm/css/xterm.css and fitaddon ; call fitaddon.fit() on mount and resize. implement command registry ( help , ls , cat , clear , open <app> , about , date ). add paste support, auto-complete, and scrollback limit. keep client-only dynamic import. visual studio code app now embeds a stackblitz ide via iframe instead of a local monaco editor. x implement read-only timeline embed with ssr disabled and light/dark toggle. spotify use embed player for public tracks with editable playlist json and mini-player mode. youtube add search and watch view with click-to-load embeds. store &quot;recently watched&quot; in localstorage . add a basic component test similar to existing ones. security tool simulators implement safe, non-executing simulators for each tool. features: load sample outputs from json fixtures and explain them. provide command builder ui that crafts strings but never runs them. show &quot;for lab use only&quot; banner and optional &quot;enable lab mode&quot; flag (off by default). tools to cover: beef, ettercap, metasploit, wireshark, kismet, nikto, autopsy, nessus, hydra, nmap nse, radare2, volatility, hashcat, metasploit post, dsniff, john the ripper, openvas, recon-ng, ghidra, mimikatz, reaver . other apps about alex replace static content with resume widget loaded from json; show skills as chips and project links. settings add theme picker, wallpaper selector, and &quot;reset desktop&quot; clearing localstorage in settingsstore.js . resource monitor display performance.memory data and fps from performance.now() deltas. show cpu synthetic load graph using requestanimationframe buckets. project gallery load projects from projects.json ; add filters and buttons for repo and live demo. todoist implement local task manager with sections, due dates, drag-drop ordering, and quick-add shortcut. persist tasks in localstorage . trash soft-delete files from virtual fs with restore or empty options; store original path metadata. contact me simple form posting to dummy endpoint with client-side validation and privacy note. converter centralize unit mappings in components/apps/converter/units.js and maintain test coverage. qr tool add camera select drop-down and &quot;download qr&quot; button after generation. ascii art support text-to-ascii and image-to-ascii via hidden canvas sampling. figlet provide font selector, copy-to-clipboard, and cache fonts in indexeddb. quote generator use offline json quotes with tags and &quot;no repeats&quot; option. weather show fake data with city picker and unit toggle, or accept user-provided api key in settings. games for each game below, build a canvas-based component with requestanimationframe game loop, reset() function, pause, sound toggle, small default window size, and localstorage highscores. register each with createdynamicapp(&#39;<name>&#39;,&#39;<title>&#39;) and createdisplay . 2048 asteroids battleship blackjack breakout car racer checkers chess connect four frogger hangman: add found words list, timer, difficulty. memory minesweeper pacman platformer pong reversi simon snake sokoban solitaire tic tac toe tetris tower defense word search: enhance with found words list, timer, difficulty. nonogram space invaders sudoku flappy bird pinball housekeeping keep apps.config.js organized with utilities and games grouped and exported consistently. monitor fast-glob updates and explore hash optimizations for the custom service worker."
    },
    {
      "slug": "architecture",
      "title": "Architecture",
      "categories": [
        "Architecture"
      ],
      "excerpt": "Architecture The project is a desktop-style portfolio built with Next.js. pages/ wraps applications using Next.js routing and dynamic imports. components/apps/ contains the individual app…",
      "markdown": "# Architecture\n\nThe project is a desktop-style portfolio built with Next.js.\n\n- **pages/** wraps applications using Next.js routing and dynamic imports.\n- **components/apps/** contains the individual app implementations.\n- **pages/api/** exposes serverless functions for backend features.\n\nFor setup instructions, see the [Getting Started](./getting-started.md) guide.\n",
      "searchText": "architecture the project is a desktop-style portfolio built with next.js. pages/ wraps applications using next.js routing and dynamic imports. components/apps/ contains the individual app implementations. pages/api/ exposes serverless functions for backend features. for setup instructions, see the getting started guide."
    },
    {
      "slug": "bare-fs-dependency",
      "title": "bare-fs dependency rationale",
      "categories": [
        "Architecture"
      ],
      "excerpt": "bare-fs dependency rationale The project surfaces an installation warning for bare-fs . Running yarn why bare-fs shows the package is pulled in via the optional dependency chain…",
      "markdown": "# bare-fs dependency rationale\n\nThe project surfaces an installation warning for `bare-fs`. Running `yarn why bare-fs` shows the package is pulled in via the optional dependency chain `@puppeteer/browsers` → `tar-fs` → `bare-fs`.\n\nWe upgraded `puppeteer` and `puppeteer-core` to bring in `@puppeteer/browsers@2.10.8`, the latest release at the time of writing, but the warning persists because `tar-fs@3.1.0` still declares `bare-fs` as an optional dependency. No newer versions of `tar-fs` are available that remove `bare-fs`.\n\nUntil upstream packages drop this dependency, `bare-fs` remains required and can be safely ignored.\n",
      "searchText": "bare-fs dependency rationale the project surfaces an installation warning for bare-fs . running yarn why bare-fs shows the package is pulled in via the optional dependency chain @puppeteer/browsers → tar-fs → bare-fs . we upgraded puppeteer and puppeteer-core to bring in @puppeteer/browsers@2.10.8 , the latest release at the time of writing, but the warning persists because tar-fs@3.1.0 still declares bare-fs as an optional dependency. no newer versions of tar-fs are available that remove bare-fs . until upstream packages drop this dependency, bare-fs remains required and can be safely ignored."
    },
    {
      "slug": "deauth-mitigation",
      "title": "Deauthentication Attack Mitigation",
      "categories": [
        "Security"
      ],
      "excerpt": "Deauthentication Attack Mitigation Deauthentication floods send forged management frames to disconnect wireless clients. Use the following hardening steps: Enable 802.11w Management Frame…",
      "markdown": "# Deauthentication Attack Mitigation\n\nDeauthentication floods send forged management frames to disconnect wireless clients. Use the following hardening steps:\n\n- [ ] Enable **802.11w Management Frame Protection** so that deauth frames are authenticated.\n- [ ] Monitor for excessive deauthentication traffic and alert on anomalies.\n- [ ] Use strong encryption (WPA2/WPA3) and rotate keys regularly.\n- [ ] Limit access-point exposure and segment networks.\n\n",
      "searchText": "deauthentication attack mitigation deauthentication floods send forged management frames to disconnect wireless clients. use the following hardening steps: enable 802.11w management frame protection so that deauth frames are authenticated. monitor for excessive deauthentication traffic and alert on anomalies. use strong encryption (wpa2/wpa3) and rotate keys regularly. limit access-point exposure and segment networks."
    },
    {
      "slug": "getting-started",
      "title": "Getting Started",
      "categories": [
        "Architecture",
        "Guides"
      ],
      "excerpt": "Getting Started This project is built with Next.js . Prerequisites Node.js 20 yarn or npm Installation yarn install Running in Development yarn dev See the Architecture document for an overview of…",
      "markdown": "# Getting Started\n\nThis project is built with [Next.js](https://nextjs.org/).\n\n## Prerequisites\n\n- Node.js 20\n- yarn or npm\n\n## Installation\n\n```bash\nyarn install\n```\n\n## Running in Development\n\n```bash\nyarn dev\n```\n\nSee the [Architecture](./architecture.md) document for an overview of how the project is organized.\n\nFor app contributions, see the [New App Checklist](./new-app-checklist.md).\n",
      "searchText": "getting started this project is built with next.js . prerequisites node.js 20 yarn or npm installation yarn install running in development yarn dev see the architecture document for an overview of how the project is organized. for app contributions, see the new app checklist ."
    },
    {
      "slug": "internal-layouts",
      "title": "Internal Layouts",
      "categories": [
        "Architecture"
      ],
      "excerpt": "Internal Layouts This project provides Tailwind utilities that mimic Bootstrap&#39;s 12-column grid. Use them to create internal layouts without relying on Bootstrap itself. Usage Wrap columns in…",
      "markdown": "# Internal Layouts\n\nThis project provides Tailwind utilities that mimic Bootstrap's 12-column grid. Use them to create internal layouts without relying on Bootstrap itself.\n\n## Usage\n\nWrap columns in a flex container and apply the `col-*` classes to control widths.\n\n```html\n<div class=\"flex flex-wrap\">\n  <div class=\"col-6\">Left</div>\n  <div class=\"col-6\">Right</div>\n</div>\n```\n\nOffsets are also available through `offset-*` classes.\n\n```html\n<div class=\"flex flex-wrap\">\n  <div class=\"col-4 offset-4\">Centered</div>\n</div>\n```\n",
      "searchText": "internal layouts this project provides tailwind utilities that mimic bootstrap&#39;s 12-column grid. use them to create internal layouts without relying on bootstrap itself. usage wrap columns in a flex container and apply the col-* classes to control widths. <div class=&quot;flex flex-wrap&quot;> <div class=&quot;col-6&quot;>left</div> <div class=&quot;col-6&quot;>right</div> </div> offsets are also available through offset-* classes. <div class=&quot;flex flex-wrap&quot;> <div class=&quot;col-4 offset-4&quot;>centered</div> </div>"
    },
    {
      "slug": "keyboard-only-test-plan",
      "title": "Keyboard-Only Window Management Test Plan",
      "categories": [
        "Accessibility",
        "Testing"
      ],
      "excerpt": "Keyboard-Only Window Management Test Plan Resizing Open any window. Focus the window. Hold Shift and press arrow keys: Shift + ArrowRight increases width. Shift + ArrowLeft decreases width. Shift…",
      "markdown": "# Keyboard-Only Window Management Test Plan\n\n## Resizing\n1. Open any window.\n2. Focus the window.\n3. Hold **Shift** and press arrow keys:\n   - **Shift + ArrowRight** increases width.\n   - **Shift + ArrowLeft** decreases width.\n   - **Shift + ArrowDown** increases height.\n   - **Shift + ArrowUp** decreases height.\n4. Verify the window resizes accordingly.\n\n## Snapping\n1. With the window focused, press arrow keys with **Alt**:\n   - **Alt + ArrowLeft** snaps the window to the left half of the screen.\n   - **Alt + ArrowRight** snaps it to the right half.\n   - **Alt + ArrowUp** snaps it to the top half.\n   - **Alt + ArrowDown** restores the window to its previous size and position.\n\n## Focus\n1. After resizing or snapping, press **Tab** to move focus inside the window.\n2. Continue pressing **Tab** to confirm focus can leave the window and is not trapped.\n3. Shift+Tab moves focus backward as expected.\n",
      "searchText": "keyboard-only window management test plan resizing open any window. focus the window. hold shift and press arrow keys: shift + arrowright increases width. shift + arrowleft decreases width. shift + arrowdown increases height. shift + arrowup decreases height. verify the window resizes accordingly. snapping with the window focused, press arrow keys with alt : alt + arrowleft snaps the window to the left half of the screen. alt + arrowright snaps it to the right half. alt + arrowup snaps it to the top half. alt + arrowdown restores the window to its previous size and position. focus after resizing or snapping, press tab to move focus inside the window. continue pressing tab to confirm focus can leave the window and is not trapped. shift+tab moves focus backward as expected."
    },
    {
      "slug": "new-app-checklist",
      "title": "New App Checklist",
      "categories": [
        "Tasks"
      ],
      "excerpt": "New App Checklist Use this checklist when adding a new app to the portfolio. Icon Place a 64x64 SVG or PNG icon in public/themes/Yaru/apps/ . Name the file after the app id (e.g. my-app.svg ).…",
      "markdown": "# New App Checklist\n\nUse this checklist when adding a new app to the portfolio.\n\n## Icon\n\n- Place a **64x64** SVG or PNG icon in `public/themes/Yaru/apps/`.\n- Name the file after the app id (e.g. `my-app.svg`).\n- Reference the icon in `apps.config.js` with `icon: './themes/Yaru/apps/my-app.svg'`.\n\n## Dynamic import pattern\n\n```ts\nimport dynamic from 'next/dynamic';\n\nconst MyApp = dynamic(() => import('./components/apps/my-app'), {\n  ssr: false,\n});\nexport const displayMyApp = () => <MyApp />;\n```\n\n## Content Security Policy\n\n- Apps that fetch data or embed external sites must whitelist their domains in `next.config.js`.\n- Update the appropriate directives (`connect-src`, `frame-src`, `img-src`) and `images.domains` when needed.\n\n## Playwright smoke test\n\n```ts\nimport { test, expect } from '@playwright/test';\n\ntest('My App launches', async ({ page }) => {\n  await page.goto('http://localhost:3000');\n  await page.click('text=My App');\n  await expect(page.locator('[data-testid=\"my-app\"]')).toBeVisible();\n});\n```\n",
      "searchText": "new app checklist use this checklist when adding a new app to the portfolio. icon place a 64x64 svg or png icon in public/themes/yaru/apps/ . name the file after the app id (e.g. my-app.svg ). reference the icon in apps.config.js with icon: &#39;./themes/yaru/apps/my-app.svg&#39; . dynamic import pattern import dynamic from &#39;next/dynamic&#39;; const myapp = dynamic(() => import(&#39;./components/apps/my-app&#39;), { ssr: false, }); export const displaymyapp = () => <myapp />; content security policy apps that fetch data or embed external sites must whitelist their domains in next.config.js . update the appropriate directives ( connect-src , frame-src , img-src ) and images.domains when needed. playwright smoke test import { test, expect } from &#39;@playwright/test&#39;; test(&#39;my app launches&#39;, async ({ page }) => { await page.goto(&#39;http://localhost:3000&#39;); await page.click(&#39;text=my app&#39;); await expect(page.locator(&#39;[data-testid=&quot;my-app&quot;]&#39;)).tobevisible(); });"
    },
    {
      "slug": "nmap-nse-walkthrough",
      "title": "Nmap NSE Walkthrough (Simulation)",
      "categories": [
        "Guides",
        "Security"
      ],
      "excerpt": "Nmap NSE Walkthrough (Simulation) ⚠️ For educational use in authorized lab environments only. This guide shows how an Nmap scan using the default vulnerability scripts might appear and lists…",
      "markdown": "# Nmap NSE Walkthrough (Simulation)\n\n> ⚠️ For educational use in authorized lab environments only.\n\nThis guide shows how an Nmap scan using the default vulnerability scripts might appear and lists defensive steps to mitigate such reconnaissance.\n\n## Example Command\n\n```\nnmap -sV --script vuln 10.0.0.5\n```\n\n- `-sV` enables service and version detection.\n- `--script vuln` runs safe vulnerability check scripts bundled with Nmap.\n\n## Static Example Output\n\n```\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.9p1\n80/tcp open  http    Apache httpd 2.4.52\n443/tcp closed https\n```\n\nThis output is a canned sample; the simulation never contacts a real host.\n\n## Defensive Measures\n\n- Restrict inbound traffic using firewalls and disable unused ports.\n- Monitor logs for repeated scans or NSE script fingerprints.\n- Patch exposed services so known vulnerabilities are not present.\n\n",
      "searchText": "nmap nse walkthrough (simulation) ⚠️ for educational use in authorized lab environments only. this guide shows how an nmap scan using the default vulnerability scripts might appear and lists defensive steps to mitigate such reconnaissance. example command nmap -sv --script vuln 10.0.0.5 -sv enables service and version detection. --script vuln runs safe vulnerability check scripts bundled with nmap. static example output port state service version 22/tcp open ssh openssh 8.9p1 80/tcp open http apache httpd 2.4.52 443/tcp closed https this output is a canned sample; the simulation never contacts a real host. defensive measures restrict inbound traffic using firewalls and disable unused ports. monitor logs for repeated scans or nse script fingerprints. patch exposed services so known vulnerabilities are not present."
    },
    {
      "slug": "phaser-listeners",
      "title": "Phaser Event Listeners",
      "categories": [
        "Accessibility",
        "Games",
        "Testing"
      ],
      "excerpt": "Phaser Event Listeners This document records active event listeners in the Phaser Matter demo after profiling and cleanup. Keyboard listeners – attached to the game container to capture left,…",
      "markdown": "# Phaser Event Listeners\n\nThis document records active event listeners in the Phaser Matter demo after profiling and cleanup.\n\n- **Keyboard listeners** – attached to the game container to capture left, right and jump controls. These are required for gameplay but may be replaced with Phaser's input system in the future.\n- **Gamepad remap polling** – uses a 100ms `setInterval` while waiting for a button press during remapping to reduce CPU usage.\n- **Matter `collisionstart`** – handles checkpoint and hazard collisions. Essential for gameplay; review if collision volume grows.\n\n",
      "searchText": "phaser event listeners this document records active event listeners in the phaser matter demo after profiling and cleanup. keyboard listeners – attached to the game container to capture left, right and jump controls. these are required for gameplay but may be replaced with phaser&#39;s input system in the future. gamepad remap polling – uses a 100ms setinterval while waiting for a button press during remapping to reduce cpu usage. matter collisionstart – handles checkpoint and hazard collisions. essential for gameplay; review if collision volume grows."
    },
    {
      "slug": "pip-portal",
      "title": "Pip Portal",
      "categories": [
        "Guides"
      ],
      "excerpt": "Pip Portal The PipPortal component provides a simple API for rendering React content inside a Document Picture-in-Picture window. Usage Wrap your application with PipPortalProvider and use the…",
      "markdown": "# Pip Portal\n\nThe `PipPortal` component provides a simple API for rendering React\ncontent inside a [Document Picture-in-Picture](https://developer.mozilla.org/en-US/docs/Web/API/Document_Picture-in-Picture_API) window.\n\n## Usage\n\nWrap your application with `PipPortalProvider` and use the `usePipPortal`\nhook to open or close the PiP window.\n\n```tsx\nimport PipPortalProvider, { usePipPortal } from '../components/common/PipPortal';\n\nfunction HudButton() {\n  const { open, close } = usePipPortal();\n\n  return (\n    <div>\n      <button\n        onClick={() =>\n          open(<div className=\"p-2\">Timer: 00:30</div>)\n        }\n      >\n        Show Timer\n      </button>\n      <button onClick={close}>Close</button>\n    </div>\n  );\n}\n\n// in _app.jsx\nexport default function App({ Component, pageProps }) {\n  return (\n    <PipPortalProvider>\n      <Component {...pageProps} />\n    </PipPortalProvider>\n  );\n}\n```\n\nThe PiP window persists as long as the tab is open and automatically\ncloses on the `pagehide` event.  \nYou can mount timers, heads-up displays or other widgets into this portal\nto keep them visible while the user navigates the site.\n\n",
      "searchText": "pip portal the pipportal component provides a simple api for rendering react content inside a document picture-in-picture window. usage wrap your application with pipportalprovider and use the usepipportal hook to open or close the pip window. import pipportalprovider, { usepipportal } from &#39;../components/common/pipportal&#39;; function hudbutton() { const { open, close } = usepipportal(); return ( <div> <button onclick={() => open(<div classname=&quot;p-2&quot;>timer: 00:30</div>) } > show timer </button> <button onclick={close}>close</button> </div> ); } // in _app.jsx export default function app({ component, pageprops }) { return ( <pipportalprovider> <component {...pageprops} /> </pipportalprovider> ); } the pip window persists as long as the tab is open and automatically closes on the pagehide event. you can mount timers, heads-up displays or other widgets into this portal to keep them visible while the user navigates the site."
    },
    {
      "slug": "reconng",
      "title": "Recon-ng Simulation",
      "categories": [
        "Architecture",
        "Security"
      ],
      "excerpt": "Recon-ng Simulation ⚠️ For educational use in authorized lab environments only. Module Schemas Modules are defined in components/apps/reconng/index.js as schema objects with: input – expected…",
      "markdown": "# Recon-ng Simulation\n\n> ⚠️ For educational use in authorized lab environments only.\n\n## Module Schemas\n\nModules are defined in `components/apps/reconng/index.js` as schema objects with:\n\n- `input` – expected target type (`domain` or `ip`).\n- `demo(target)` – returns canned text, nodes and edges for offline runs.\n- `fetchUrl(target)` – optional CORS-friendly endpoint used when **Live fetch** is enabled.\n\n## Offline Demonstration\n\nStatic fixtures in `public/reconng-marketplace.json` and `public/reconng-chain.json` supply marketplace modules and example chains. Module runs default to the schema's `demo` output so the simulation works without network access.\n\n## Module Chains\n\nThe Builder view visualizes an example module chain and lets you execute it. Modules run in topological order and pass any discovered artifacts (domains, IPs and entities) to downstream modules. Results are rendered with Cytoscape using the `cose-bilkent` layout.\n\n## Opt-in Network Requests\n\nChecking the **Live fetch** box sends a limited request to the schema's `fetchUrl`. If the request succeeds, its text replaces the demo output. If it fails, the demo data is shown instead. Remote responses are not stored and the graph remains the example data.\n\n## Data Storage\n\n - Per-module API keys are persisted in `localStorage` under the key `reconng-api-keys` and inputs are masked by default.\n- Workspace graphs and entity sets exist only in memory but can be exported as CSV or JSON.\n- Static marketplace and chain data live in the `public/` directory.\n\n",
      "searchText": "recon-ng simulation ⚠️ for educational use in authorized lab environments only. module schemas modules are defined in components/apps/reconng/index.js as schema objects with: input – expected target type ( domain or ip ). demo(target) – returns canned text, nodes and edges for offline runs. fetchurl(target) – optional cors-friendly endpoint used when live fetch is enabled. offline demonstration static fixtures in public/reconng-marketplace.json and public/reconng-chain.json supply marketplace modules and example chains. module runs default to the schema&#39;s demo output so the simulation works without network access. module chains the builder view visualizes an example module chain and lets you execute it. modules run in topological order and pass any discovered artifacts (domains, ips and entities) to downstream modules. results are rendered with cytoscape using the cose-bilkent layout. opt-in network requests checking the live fetch box sends a limited request to the schema&#39;s fetchurl . if the request succeeds, its text replaces the demo output. if it fails, the demo data is shown instead. remote responses are not stored and the graph remains the example data. data storage per-module api keys are persisted in localstorage under the key reconng-api-keys and inputs are masked by default. workspace graphs and entity sets exist only in memory but can be exported as csv or json. static marketplace and chain data live in the public/ directory."
    },
    {
      "slug": "template-glossary",
      "title": "Template glossary",
      "categories": [
        "Reference",
        "Security"
      ],
      "excerpt": "Template glossary This glossary covers common terms used in the Nessus sample templates. For full details see the Tenable documentation. Severity – Classification of a finding&#39;s risk such as…",
      "markdown": "# Template glossary\n\nThis glossary covers common terms used in the Nessus sample templates. For full details see the Tenable documentation.\n\n- **Severity** – Classification of a finding's risk such as *Critical*, *High*, *Medium*, or *Low*. [Tenable Severity Levels](https://docs.tenable.com/vulnerability-management/Content/SeverityLevels.htm)\n- **Plugin Family** – Grouping of related Nessus plugins by technology or service. [Plugin Families](https://docs.tenable.com/nessus/Content/PluginFamilies.htm)\n- **Host** – The asset that generated the finding, identified by hostname or IP. [Host summary](https://docs.tenable.com/nessus/Content/HostSummary.htm)\n\nAll examples in this project use only the bundled `sample-report.json` and do not perform real scans or uploads.\n",
      "searchText": "template glossary this glossary covers common terms used in the nessus sample templates. for full details see the tenable documentation. severity – classification of a finding&#39;s risk such as critical , high , medium , or low . tenable severity levels plugin family – grouping of related nessus plugins by technology or service. plugin families host – the asset that generated the finding, identified by hostname or ip. host summary all examples in this project use only the bundled sample-report.json and do not perform real scans or uploads."
    },
    {
      "slug": "TASKS_UI_POLISH",
      "title": "UI Polish Task List",
      "categories": [
        "Tasks"
      ],
      "excerpt": "UI Polish Task List This document tracks UI polish tasks for the Kali/Ubuntu inspired desktop experience. Each item includes acceptance criteria and file hints. A) Windowing & Desktop interactions…",
      "markdown": "# UI Polish Task List\n\nThis document tracks UI polish tasks for the Kali/Ubuntu inspired desktop experience. Each item includes acceptance criteria and file hints.\n\n## A) Windowing & Desktop interactions\n\n1. **Snap-to-grid for move and resize**\n   - **Accept:** Dragging and resizing snaps to an 8 px grid. Toggle in Settings.\n   - **Where:** `components/base/window/*`, `components/screen/desktop.js`, `hooks/usePersistentState.ts`.\n   - **Why:** Consistent rhythm improves perceived quality.\n\n2. **Window size presets**\n   - **Accept:** Context menu offers sizes: 960×600, 1200×800, 1440×900.\n   - **Where:** `components/context-menus/*`, window component.\n\n3. **GNOME-like maximize on titlebar double-click**\n   - **Accept:** Double-click titlebar toggles maximize.\n   - **Where:** window chrome component.\n   - **Ref:** GNOME window patterns.\n\n4. **Edge snap (tiling)**\n   - **Accept:** Dragging to left or right edge snaps to half screen, top edge maximizes.\n   - **Where:** desktop drag controller.\n\n5. **Keyboard window management**\n   - **Accept:** Alt+Tab app switcher, Alt+\\` intra-app cycling, Super+Arrow tiling.\n   - **Where:** desktop keymap handler.\n\n6. **Remember window positions per app**\n   - **Accept:** Reopen restores last size and position per app key.\n   - **Where:** `usePersistentState.ts`.\n\n7. **Focus ring and z-index clarity**\n   - **Accept:** Active window has clear focus ring and shadow, no ambiguity with stacked windows.\n   - **Where:** window CSS, Tailwind tokens.\n\n8. **Dock running indicators**\n   - **Accept:** Running apps show a small pill indicator. Click dock icon focuses existing window before spawning new one.\n   - **Where:** dock component, app launcher logic.\n\n9. **Dock context menu**\n   - **Accept:** Right-click dock icon shows Quit, Hide, New Window, Unpin.\n   - **Where:** `components/context-menus/*`.\n\n10. **Window controls hit area**\n    - **Accept:** Close, Minimize, Maximize hit targets ≥ 40×40 CSS px, with hover and pressed states.\n    - **Where:** titlebar CSS and events.\n\n11. **Resizable edges and corners**\n    - **Accept:** Cursor changes on edges and corners, resize feels native with 8 px handles.\n    - **Where:** window chrome.\n\n12. **Workspaces (virtual desktops) MVP**\n    - **Accept:** Shortcut Ctrl+Super+Left/Right cycles 2–3 workspaces; windows are scoped.\n    - **Where:** desktop state machine.\n\n13. **Window min size constraints**\n    - **Accept:** Apps cannot resize below content-fit minimums; aspect guard keeps within ~1.6:1 golden ratio band for dialogs.\n    - **Where:** window constraints.\n\n14. **Alt-Tab overlay polish**\n    - **Accept:** Smooth 150–200 ms fade and scale in, row of app icons with labels.\n    - **Where:** overlay component; follow motion ranges.\n\n## B) Responsive layout & sizing\n\n15. **HiDPI awareness**\n    - **Accept:** On `devicePixelRatio>=1.5`, increase titlebar height and icon sizes by 12–16%.\n    - **Where:** CSS variables in `styles/index.css`, Settings toggle.\n\n16. **Small screens fallback**\n    - **Accept:** At ≤ 360×640, desktop falls back to single-window mode with app drawer.\n    - **Where:** desktop layout, media queries.\n\n17. **Taskbar density setting**\n    - **Accept:** Compact, Comfortable, Spacious densities adjust paddings on a 4 or 8 px step.\n    - **Where:** Tailwind theme tokens.\n\n18. **Safe-area insets**\n    - **Accept:** Dock and notifications avoid notches using `env(safe-area-inset-*)`.\n    - **Where:** CSS.\n\n19. **Portrait behavior**\n    - **Accept:** Windows open centered and sized to 90% width on portrait; dialogs stacked.\n    - **Where:** new-window sizing util.\n\n20. **Content overflow guards**\n    - **Accept:** Apps using iframes or canvases never overflow titlebar; scrollbars styled.\n    - **Where:** app shells.\n\n21. **Title truncation and tooltips**\n    - **Accept:** Ellipsize long window titles, show full text on hover.\n    - **Where:** titlebar.\n\n22. **Bootstrap grid equivalence via Tailwind**\n    - **Accept:** A simple 12-col grid utility in Tailwind for internal layouts.\n    - **Where:** `tailwind.config.js`.\n\n## C) Visual design & theming\n\n23. **Ubuntu/Kali theme tokens audit**\n    - **Accept:** One source of truth for colors, radii, shadows, spacing scale; tokens documented.\n    - **Where:** `tailwind.config.js`, `styles/index.css`.\n\n24. **Shadow elevation scale**\n    - **Accept:** 4 levels: dock, window inactive, active, modal; consistent blurs and offsets.\n    - **Where:** CSS tokens.\n\n25. **Accent color setting**\n    - **Accept:** Choose from 6 accents; applies to focus, selection, controls; stored persistently.\n    - **Where:** Settings app + CSS variables.\n\n26. **Wallpaper fit and blur**\n    - **Accept:** Wallpapers are `object-fit: cover` with soft blur on login/lock screens.\n    - **Where:** desktop and lock components.\n\n27. **Iconography pass**\n    - **Accept:** SVG icons normalized to common grid (e.g., 24 or 32), consistent stroke widths.\n    - **Where:** `public/images/*`.\n\n28. **Hover and pressed states**\n    - **Accept:** Dock tiles, app grid, buttons have clear hover and pressed; 100–150 ms ease out.\n    - **Where:** CSS transitions.\n\n29. **High-contrast theme**\n    - **Accept:** Accessible theme toggle with WCAG AA contrast for text and key UI.\n    - **Where:** theme tokens.\n\n30. **Window border and corner polish**\n    - **Accept:** 1 px hairline borders with subtle inner highlights; corner radius consistent.\n\n## D) Performance & loading\n\n31. **LCP optimization on desktop boot**\n    - **Accept:** Largest Contentful Paint ≤ 2.0 s on mid-range mobile on Vercel.\n    - **Where:** prioritize first wallpaper and main heading; use Next `<Image>` with proper `sizes`, `priority`.\n\n32. **Avoid layout shift (CLS)**\n    - **Accept:** CLS < 0.02 across pages; reserve space for dock and window chrome.\n    - **Where:** CSS min-height rules; Next `<Image>` with width/height or `fill`.\n\n33. **Bundle trims for heavy apps**\n    - **Accept:** Verify dynamic import with prefetch hints for games, ensure no heavy libs leak into desktop shell.\n    - **Where:** `apps.config.js`, dynamic imports; already supported, extend coverage.\n\n34. **Idle prefetch of likely apps**\n    - **Accept:** On idle, prefetch top 3 recent apps.\n    - **Where:** desktop idle callback; dynamic import prefetch.\n\n35. **Canvas and worker offloading**\n    - **Accept:** Games render on `OffscreenCanvas` where available; logic in a Worker to reduce main thread jank.\n    - **Where:** `components/apps/Games/*`, `workers/*`.\n    - **Note:** You already mock workers in tests.\n\n36. **Virtualize app grid**\n    - **Accept:** App grid remains smooth at 120+ items with virtualization.\n    - **Where:** app catalog grid component.\n\n37. **Throttle window shadows on move**\n    - **Accept:** While dragging, simplify expensive effects, restore on drop.\n    - **Where:** CSS class toggles during drag.\n\n38. **Image formats and `next/image` audit**\n    - **Accept:** Convert wallpapers and big icons to WebP/AVIF; set correct `sizes`; add blur placeholders for hero imagery.\n    - **Where:** `public/images`, usages.\n\n39. **Preload critical fonts**\n    - **Accept:** Preload base UI font with `font-display: swap` and unicode-range subsets.\n    - **Where:** `_document.jsx` or `<Head>` in Pages.\n\n40. **Analyze with Speed Insights and Lighthouse budgets**\n    - **Accept:** Set thresholds and track in CI; address regressions.\n    - **Where:** Vercel Speed Insights already integrated in `_app.jsx`.\n\n## E) Accessibility\n\n41. **Keyboard-first navigation**\n    - **Accept:** Full desktop and app grid operable by keyboard (Tab, Arrow, Enter, Escape), with visible focus.\n    - **Where:** focus management in desktop and window components.\n\n42. **ARIA for window chrome**\n    - **Accept:** Titlebar buttons have `aria-label`s, window has `role=\"dialog\"` or `region\"` with descriptive `aria-labelledby`.\n    - **Where:** window component.\n\n43. **Live regions for terminal output**\n    - **Accept:** Terminal app announces new output via `aria-live=\"polite\"` with rate limiting.\n    - **Where:** terminal app.\n\n44. **Reduced motion support**\n    - **Accept:** `prefers-reduced-motion` respected, sets zero or minimal animations.\n    - **Where:** global CSS and motion helpers.\n\n45. **Color contrast checks**\n    - **Accept:** All text meets WCAG AA; verify with `pa11y` script.\n    - **Where:** `pa11yci.json`, Tailwind tokens.\n\n46. **Skip to desktop content**\n    - **Accept:** Hidden “Skip to desktop” link focuses app grid on activation.\n    - **Where:** `_app.jsx` or layout.\n\n47. **Dialog semantics for modals**\n    - **Accept:** Lock screen, settings, and prompts use `role=\"dialog\"` with focus trap and `aria-modal=\"true\"`.\n    - **Where:** respective components.\n\n48. **High-contrast theme validation**\n    - **Accept:** Automated checks for contrast across states using `pa11y` scenarios.\n    - **Where:** `pa11yci.json`.\n\n49. **Tooltips accessible**\n    - **Accept:** Tooltips are announced on focus, not only hover.\n\n## F) App UX improvements\n\n50. **Gedit contact form UX**\n    - **Accept:** Inline validation, clear error text, loading state, success toast; Recaptcha errors surfaced.\n    - **Where:** Gedit app; env vars already specified in README.\n\n51. **Chrome app permissions UI**\n    - **Accept:** Explicit message about sandboxed iframes and limited capabilities; tighten CSP and image domains for embeds.\n    - **Where:** Chrome app; `next.config.js` CSP list.\n\n52. **Project Gallery lazy loading**\n    - **Accept:** Cards lazy-load images with aspect boxes to avoid CLS; blur placeholders.\n    - **Where:** gallery app; `<Image>` audit.\n\n53. **Games help overlay consistency**\n    - **Accept:** Standardized overlay for controls, pause, restart; same keybind to toggle.\n    - **Where:** `components/apps/Games/common/*`.\n\n54. **Weather app responsiveness**\n    - **Accept:** Cards wrap cleanly at 320 px width, no overflow; skeletons while loading.\n    - **Where:** weather app.\n\n55. **Alex app and About content spacing**\n    - **Accept:** Adopt 8 px baseline rhythm across headings, paragraphs, and lists.\n    - **Where:** Alex/About app styles.\n\n## G) PWA & offline polish\n\n56. **Offline desktop and app-fallback page**\n    - **Accept:** Friendly offline screen with retry and cached apps list; SW caches minimal shell.\n    - **Where:** `public/`, PWA config. ([ducanh-next-pwa.vercel.app][12])\n\n57. **Install prompt UX**\n    - **Accept:** Non-intrusive “Install” entry in Settings and Help; show only when `beforeinstallprompt` fires.\n    - **Where:** PWA prompt handler.\n\n58. **Share target to Sticky Notes**\n    - **Accept:** Web Share Target pushes text/URLs into Sticky Notes; documented in README.\n    - **Where:** `manifest.json`, notes app; aligns with your PWA share flow.\n\n## H) SEO, metadata, social\n\n59. **`<SEO/Meta>` audit**\n    - **Accept:** Titles, descriptions, canonical, Open Graph images for desktop and key apps; JSON‑LD for Person and Project list.\n    - **Where:** `components/SEO/Meta.js`.\n\n60. **Image sizes for social previews**\n    - **Accept:** 1200×630 Open Graph, 1080×1080 square fallback; served as static files and referenced in meta.\n    - **Where:** `public/images/social/*`.\n\n",
      "searchText": "ui polish task list this document tracks ui polish tasks for the kali/ubuntu inspired desktop experience. each item includes acceptance criteria and file hints. a) windowing & desktop interactions snap-to-grid for move and resize accept: dragging and resizing snaps to an 8 px grid. toggle in settings. where: components/base/window/* , components/screen/desktop.js , hooks/usepersistentstate.ts . why: consistent rhythm improves perceived quality. window size presets accept: context menu offers sizes: 960×600, 1200×800, 1440×900. where: components/context-menus/* , window component. gnome-like maximize on titlebar double-click accept: double-click titlebar toggles maximize. where: window chrome component. ref: gnome window patterns. edge snap (tiling) accept: dragging to left or right edge snaps to half screen, top edge maximizes. where: desktop drag controller. keyboard window management accept: alt+tab app switcher, alt+` intra-app cycling, super+arrow tiling. where: desktop keymap handler. remember window positions per app accept: reopen restores last size and position per app key. where: usepersistentstate.ts . focus ring and z-index clarity accept: active window has clear focus ring and shadow, no ambiguity with stacked windows. where: window css, tailwind tokens. dock running indicators accept: running apps show a small pill indicator. click dock icon focuses existing window before spawning new one. where: dock component, app launcher logic. dock context menu accept: right-click dock icon shows quit, hide, new window, unpin. where: components/context-menus/* . window controls hit area accept: close, minimize, maximize hit targets ≥ 40×40 css px, with hover and pressed states. where: titlebar css and events. resizable edges and corners accept: cursor changes on edges and corners, resize feels native with 8 px handles. where: window chrome. workspaces (virtual desktops) mvp accept: shortcut ctrl+super+left/right cycles 2–3 workspaces; windows are scoped. where: desktop state machine. window min size constraints accept: apps cannot resize below content-fit minimums; aspect guard keeps within ~1.6:1 golden ratio band for dialogs. where: window constraints. alt-tab overlay polish accept: smooth 150–200 ms fade and scale in, row of app icons with labels. where: overlay component; follow motion ranges. b) responsive layout & sizing hidpi awareness accept: on devicepixelratio>=1.5 , increase titlebar height and icon sizes by 12–16%. where: css variables in styles/index.css , settings toggle. small screens fallback accept: at ≤ 360×640, desktop falls back to single-window mode with app drawer. where: desktop layout, media queries. taskbar density setting accept: compact, comfortable, spacious densities adjust paddings on a 4 or 8 px step. where: tailwind theme tokens. safe-area insets accept: dock and notifications avoid notches using env(safe-area-inset-*) . where: css. portrait behavior accept: windows open centered and sized to 90% width on portrait; dialogs stacked. where: new-window sizing util. content overflow guards accept: apps using iframes or canvases never overflow titlebar; scrollbars styled. where: app shells. title truncation and tooltips accept: ellipsize long window titles, show full text on hover. where: titlebar. bootstrap grid equivalence via tailwind accept: a simple 12-col grid utility in tailwind for internal layouts. where: tailwind.config.js . c) visual design & theming ubuntu/kali theme tokens audit accept: one source of truth for colors, radii, shadows, spacing scale; tokens documented. where: tailwind.config.js , styles/index.css . shadow elevation scale accept: 4 levels: dock, window inactive, active, modal; consistent blurs and offsets. where: css tokens. accent color setting accept: choose from 6 accents; applies to focus, selection, controls; stored persistently. where: settings app + css variables. wallpaper fit and blur accept: wallpapers are object-fit: cover with soft blur on login/lock screens. where: desktop and lock components. iconography pass accept: svg icons normalized to common grid (e.g., 24 or 32), consistent stroke widths. where: public/images/* . hover and pressed states accept: dock tiles, app grid, buttons have clear hover and pressed; 100–150 ms ease out. where: css transitions. high-contrast theme accept: accessible theme toggle with wcag aa contrast for text and key ui. where: theme tokens. window border and corner polish accept: 1 px hairline borders with subtle inner highlights; corner radius consistent. d) performance & loading lcp optimization on desktop boot accept: largest contentful paint ≤ 2.0 s on mid-range mobile on vercel. where: prioritize first wallpaper and main heading; use next <image> with proper sizes , priority . avoid layout shift (cls) accept: cls < 0.02 across pages; reserve space for dock and window chrome. where: css min-height rules; next <image> with width/height or fill . bundle trims for heavy apps accept: verify dynamic import with prefetch hints for games, ensure no heavy libs leak into desktop shell. where: apps.config.js , dynamic imports; already supported, extend coverage. idle prefetch of likely apps accept: on idle, prefetch top 3 recent apps. where: desktop idle callback; dynamic import prefetch. canvas and worker offloading accept: games render on offscreencanvas where available; logic in a worker to reduce main thread jank. where: components/apps/games/* , workers/* . note: you already mock workers in tests. virtualize app grid accept: app grid remains smooth at 120+ items with virtualization. where: app catalog grid component. throttle window shadows on move accept: while dragging, simplify expensive effects, restore on drop. where: css class toggles during drag. image formats and next/image audit accept: convert wallpapers and big icons to webp/avif; set correct sizes ; add blur placeholders for hero imagery. where: public/images , usages. preload critical fonts accept: preload base ui font with font-display: swap and unicode-range subsets. where: _document.jsx or <head> in pages. analyze with speed insights and lighthouse budgets accept: set thresholds and track in ci; address regressions. where: vercel speed insights already integrated in _app.jsx . e) accessibility keyboard-first navigation accept: full desktop and app grid operable by keyboard (tab, arrow, enter, escape), with visible focus. where: focus management in desktop and window components. aria for window chrome accept: titlebar buttons have aria-label s, window has role=&quot;dialog&quot; or region&quot; with descriptive aria-labelledby . where: window component. live regions for terminal output accept: terminal app announces new output via aria-live=&quot;polite&quot; with rate limiting. where: terminal app. reduced motion support accept: prefers-reduced-motion respected, sets zero or minimal animations. where: global css and motion helpers. color contrast checks accept: all text meets wcag aa; verify with pa11y script. where: pa11yci.json , tailwind tokens. skip to desktop content accept: hidden “skip to desktop” link focuses app grid on activation. where: _app.jsx or layout. dialog semantics for modals accept: lock screen, settings, and prompts use role=&quot;dialog&quot; with focus trap and aria-modal=&quot;true&quot; . where: respective components. high-contrast theme validation accept: automated checks for contrast across states using pa11y scenarios. where: pa11yci.json . tooltips accessible accept: tooltips are announced on focus, not only hover. f) app ux improvements gedit contact form ux accept: inline validation, clear error text, loading state, success toast; recaptcha errors surfaced. where: gedit app; env vars already specified in readme. chrome app permissions ui accept: explicit message about sandboxed iframes and limited capabilities; tighten csp and image domains for embeds. where: chrome app; next.config.js csp list. project gallery lazy loading accept: cards lazy-load images with aspect boxes to avoid cls; blur placeholders. where: gallery app; <image> audit. games help overlay consistency accept: standardized overlay for controls, pause, restart; same keybind to toggle. where: components/apps/games/common/* . weather app responsiveness accept: cards wrap cleanly at 320 px width, no overflow; skeletons while loading. where: weather app. alex app and about content spacing accept: adopt 8 px baseline rhythm across headings, paragraphs, and lists. where: alex/about app styles. g) pwa & offline polish offline desktop and app-fallback page accept: friendly offline screen with retry and cached apps list; sw caches minimal shell. where: public/ , pwa config. ([ducanh-next-pwa.vercel.app][12]) install prompt ux accept: non-intrusive “install” entry in settings and help; show only when beforeinstallprompt fires. where: pwa prompt handler. share target to sticky notes accept: web share target pushes text/urls into sticky notes; documented in readme. where: manifest.json , notes app; aligns with your pwa share flow. h) seo, metadata, social <seo/meta> audit accept: titles, descriptions, canonical, open graph images for desktop and key apps; json‑ld for person and project list. where: components/seo/meta.js . image sizes for social previews accept: 1200×630 open graph, 1080×1080 square fallback; served as static files and referenced in meta. where: public/images/social/* ."
    }
  ]
}
