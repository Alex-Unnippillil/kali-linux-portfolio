name: CI

on:
  pull_request:

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - run: yarn install --immutable --immutable-cache

  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - run: yarn install --immutable --immutable-cache
      - run: npm run lint

  typecheck:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - run: yarn install --immutable --immutable-cache
      - run: npm run tsc -- --noEmit

  test:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - run: yarn install --immutable --immutable-cache
      - run: yarn test --coverage

  security:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - run: yarn install --immutable --immutable-cache
      - run: yarn npm audit

  vercel-preview:
    runs-on: ubuntu-latest
    needs: install
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      NEXT_ENABLE_SOURCE_MAPS: 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - run: yarn install --immutable --immutable-cache
      - run: npx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build preview output
        run: npx vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Collect source maps
        run: |
          mkdir -p source-maps
          map_files=$(find .vercel/output -name '*.map' -print)
          if [ -n "$map_files" ]; then
            echo "$map_files" | while read -r file; do
              dest="source-maps/${file#.vercel/output/}"
              mkdir -p "$(dirname "$dest")"
              cp "$file" "$dest"
            done
          else
            echo 'No source maps generated by build.'
          fi
      - name: Remove source maps from deployment output
        run: find .vercel/output -name '*.map' -delete
      - name: Upload source maps artifact
        uses: actions/upload-artifact@v4
        with:
          name: vercel-source-maps
          path: source-maps
          if-no-files-found: warn
          retention-days: 7
      - run: npx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
