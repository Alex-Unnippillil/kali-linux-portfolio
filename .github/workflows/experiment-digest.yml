name: Experiment Digest

on:
  schedule:
    - cron: '0 15 * * 1-5'
  workflow_dispatch:

jobs:
  digest:
    name: Summarize active experiments
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Generate dashboard and reminders
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const summary = core.summary;
            const staleThresholdDays = 7;
            const staleThresholdMs = staleThresholdDays * 24 * 60 * 60 * 1000;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner,
              repo,
              state: 'open',
              labels: 'experiment',
              per_page: 100,
            });

            await summary.addHeading('Experiment Digest', 1);

            if (!issues.length) {
              await summary
                .addRaw('No open issues are labeled `experiment`.')
                .write();
              return;
            }

            const now = Date.now();
            const tableRows = [
              [{ data: 'Issue', header: true }, { data: 'Owners', header: true }, { data: 'Last updated', header: true }],
            ];

            const staleIssues = [];

            for (const issue of issues) {
              if (issue.pull_request) {
                continue;
              }

              const assignees = issue.assignees?.length
                ? issue.assignees.map((assignee) => `@${assignee.login}`).join(', ')
                : 'â€”';
              const updatedAt = new Date(issue.updated_at);
              const lastUpdated = updatedAt.toISOString().split('T')[0];
              tableRows.push([
                `[${issue.title}](${issue.html_url})`,
                assignees,
                lastUpdated,
              ]);

              if (now - updatedAt.getTime() > staleThresholdMs) {
                staleIssues.push(issue);
              }
            }

            await summary
              .addHeading('Active experiments', 2)
              .addTable(tableRows);

            if (staleIssues.length) {
              await summary.addHeading('Needs attention', 2);
              for (const issue of staleIssues) {
                await summary.addRaw(`- [#${issue.number}](${issue.html_url}) has not been updated in over ${staleThresholdDays} days.\n`);

                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issue.number,
                  body: [
                    `ðŸ‘‹ This is an automated reminder that **${issue.title}** has not been updated in over ${staleThresholdDays} days.`,
                    '',
                    'Please add the latest metrics summary or close the experiment if it has concluded.',
                    '',
                    'If the experiment is still running, update the Review checkpoints section so stakeholders know the next milestone.',
                    '',
                    '_Sent by the Experiment Digest workflow._',
                  ].join('\n'),
                });
              }
            } else {
              await summary
                .addHeading('Needs attention', 2)
                .addRaw('All active experiments have been updated within the last 7 days.');
            }

            await summary.write();
