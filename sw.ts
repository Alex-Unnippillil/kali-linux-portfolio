/// <reference lib="webworker" />
import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';
import { registerRoute, setCatchHandler } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst, CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { setCacheNameDetails, type WorkboxPlugin } from 'workbox-core';

// Precache assets generated by Next.js and listed in the manifest
setCacheNameDetails({
  prefix: process.env.NEXT_PUBLIC_BUILD_ID || 'dev',
});
precacheAndRoute(self.__WB_MANIFEST);
cleanupOutdatedCaches();

// Listen for skip waiting message from workbox-window
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

self.addEventListener('activate', event => {
  event.waitUntil(self.clients.claim());
});

// Stale-while-revalidate for icon assets
registerRoute(
  ({ url }) => url.pathname.startsWith('/icons/'),
    new StaleWhileRevalidate({
      cacheName: 'icons',
      plugins: [
        new ExpirationPlugin({
          maxEntries: 50,
          maxAgeSeconds: 7 * 24 * 60 * 60,
        }) as WorkboxPlugin,
      ],
    }),
);

// Network-first for the app index JSON
registerRoute(
  ({ url }) => url.pathname === '/projects.json',
  new NetworkFirst({ cacheName: 'app-index' }),
);

// Cache-first for wallpapers
registerRoute(
  ({ url }) => url.pathname.startsWith('/wallpapers/'),
    new CacheFirst({
      cacheName: 'wallpapers',
      plugins: [
        new ExpirationPlugin({
          maxEntries: 60,
          maxAgeSeconds: 30 * 24 * 60 * 60,
        }) as WorkboxPlugin,
      ],
    }),
);

// Cache-first for game assets
registerRoute(
  ({ url }) => url.pathname.startsWith('/apps/'),
    new CacheFirst({
      cacheName: 'game-assets',
      plugins: [
        new ExpirationPlugin({
          maxEntries: 60,
          maxAgeSeconds: 30 * 24 * 60 * 60,
        }) as WorkboxPlugin,
      ],
    }),
);

// Cache-first for image requests
registerRoute(
  ({ request }) => request.destination === 'image',
    new CacheFirst({
      cacheName: 'images',
      plugins: [
        new ExpirationPlugin({
          maxEntries: 60,
          maxAgeSeconds: 30 * 24 * 60 * 60,
        }) as WorkboxPlugin,
      ],
    }),
);

// Stale-while-revalidate for JSON feeds
registerRoute(
  ({ url }) => url.pathname.endsWith('.json') && url.pathname !== '/projects.json',
    new StaleWhileRevalidate({
      cacheName: 'json-feeds',
      plugins: [
        new ExpirationPlugin({
          maxEntries: 30,
          maxAgeSeconds: 24 * 60 * 60,
        }) as WorkboxPlugin,
      ],
    }),
);

// Network-first for docs pages to enable offline access
registerRoute(
  ({ url }) => url.pathname.startsWith('/docs/'),
    new NetworkFirst({
      cacheName: 'docs',
      plugins: [
        new ExpirationPlugin({
          maxEntries: 50,
          maxAgeSeconds: 7 * 24 * 60 * 60,
        }) as WorkboxPlugin,
      ],
    }),
);

// Offline fallback for navigation requests
setCatchHandler(async ({ event }: { event: FetchEvent }) => {
  if (event.request.mode === 'navigate') {
    return (await caches.match('/offline.html')) as Response;
  }
  return Response.error();
});

export {};
