/// <reference lib="webworker" />
import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';
import { registerRoute, setCatchHandler } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst, CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { setCacheNameDetails } from 'workbox-core';

// Precache assets generated by Next.js and listed in the manifest
setCacheNameDetails({
  prefix: process.env.NEXT_PUBLIC_BUILD_ID || 'dev',
});
precacheAndRoute(self.__WB_MANIFEST);
cleanupOutdatedCaches();

// Listen for skip waiting message from workbox-window
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

self.addEventListener('activate', event => {
  event.waitUntil(self.clients.claim());
});

// Stale-while-revalidate for icon assets
registerRoute(
  ({ url }) => url.pathname.startsWith('/icons/'),
  new StaleWhileRevalidate({
    cacheName: 'icons',
    plugins: [new ExpirationPlugin({ maxEntries: 50, maxAgeSeconds: 7 * 24 * 60 * 60 })],
  }),
);

// Network-first for the app index JSON
registerRoute(
  ({ url }) => url.pathname === '/projects.json',
  new NetworkFirst({ cacheName: 'app-index' }),
);

// Cache-first for wallpapers
registerRoute(
  ({ url }) => url.pathname.startsWith('/wallpapers/'),
  new CacheFirst({
    cacheName: 'wallpapers',
    plugins: [new ExpirationPlugin({ maxEntries: 60, maxAgeSeconds: 30 * 24 * 60 * 60 })],
  }),
);

// Cache-first for game assets
registerRoute(
  ({ url }) => url.pathname.startsWith('/apps/'),
  new CacheFirst({
    cacheName: 'game-assets',
    plugins: [new ExpirationPlugin({ maxEntries: 60, maxAgeSeconds: 30 * 24 * 60 * 60 })],
  }),
);

// Offline fallback for navigation requests
setCatchHandler(async ({ event }) => {
  if (event.request.mode === 'navigate') {
    return (await caches.match('/offline.html')) as Response;
  }
  return Response.error();
});

export {};
