// Security headers configuration for Next.js.
// Allows external badges, inline styles, and same-origin PDF embedding.

const ContentSecurityPolicy = [
  "default-src 'self'",
  // Allow external images and data URIs for badges/icons
  "img-src 'self' https: data:",
  // Permit inline styles generated by React components
  "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
  // Allow external font resources
  "font-src 'self' https://fonts.gstatic.com https://vercel.live",
  // External scripts required for embedded timelines and Vercel Live feedback
  "script-src 'self' https://vercel.live https://platform.twitter.com https://syndication.twitter.com https://cdn.syndication.twimg.com",
  // Allow outbound connections for embeds and the in-browser Chrome app
  "connect-src 'self' https://* http://* ws://* wss://* https://platform.twitter.com https://syndication.twitter.com https://cdn.syndication.twimg.com https://*.twitter.com https://*.x.com https://*.google.com https://stackblitz.com",
  // Allow iframes from any website and specific providers so the Chrome and StackBlitz apps can load arbitrary content
  "frame-src 'self' https://* http://* https://stackblitz.com https://*.google.com https://platform.twitter.com https://syndication.twitter.com",
  // Allow this site to embed its own resources (resume PDF)
  "frame-ancestors 'self'",
].join('; ');

const securityHeaders = [
  {
    key: 'Content-Security-Policy',
    value: ContentSecurityPolicy,
  },
  {
    key: 'X-Content-Type-Options',
    value: 'nosniff',
  },
  {
    key: 'Referrer-Policy',
    value: 'strict-origin-when-cross-origin',
  },
  {
    key: 'Permissions-Policy',
    value: 'camera=(), microphone=(), geolocation=()',
  },
  {
    // Allow same-origin framing so the PDF resume renders in an <object>
    key: 'X-Frame-Options',
    value: 'SAMEORIGIN',
  },
];

module.exports = {
  images: {
    domains: ['opengraph.githubassets.com', 'raw.githubusercontent.com', 'avatars.githubusercontent.com'],
  },
  webpack: (config) => {
    config.resolve = config.resolve || {};
    config.resolve.fallback = { ...(config.resolve.fallback || {}), fs: false };
    config.resolve.alias = {
      ...(config.resolve.alias || {}),
      mermaid: require('path').resolve(__dirname, 'lib/mermaidStub.js'),
      'argon2-browser': require('path').resolve(__dirname, 'lib/argon2Stub.js'),
    };
    config.experiments = { ...(config.experiments || {}), asyncWebAssembly: true };
    return config;
  },
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: securityHeaders,
      },
    ];
  },
};

