import React, { useEffect, useState } from 'react';

type ExploitInfo = {
  id: string;
  file: string;
  description: string;
  source_url: string;
};

type Vulnerability = {
  cve: {
    id: string;
    published?: string;
    descriptions?: { lang: string; value: string }[];
    metrics?: any;
  };
  exploits: ExploitInfo[];
};

const CveDashboard: React.FC = () => {
  const [keyword, setKeyword] = useState('');
  const [recent, setRecent] = useState(30);
  const [page, setPage] = useState(1);
  const [total, setTotal] = useState(0);
  const [vulns, setVulns] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(false);
  const [selected, setSelected] = useState<Vulnerability | null>(null);

  const fetchData = () => {
    setLoading(true);
    fetch(`/api/cve?keyword=${encodeURIComponent(keyword)}&recent=${recent}&page=${page}`)
      .then((r) => r.json())
      .then((d) => {
        setVulns(d.vulnerabilities || []);
        setTotal(d.totalResults || 0);
      })
      .catch(() => {
        setVulns([]);
        setTotal(0);
      })
      .finally(() => setLoading(false));
  };

  useEffect(() => {
    fetchData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [page]);

  const onSearch = () => {
    setPage(1);
    fetchData();
  };

  const totalPages = Math.ceil(total / 20);

  return (
    <div className="p-4 text-white space-y-4">
      <div className="flex space-x-2">
        <input
          value={keyword}
          onChange={(e) => setKeyword(e.target.value)}
          placeholder="Keyword"
          className="px-2 py-1 bg-gray-800 rounded"
        />
        <input
          type="number"
          value={recent}
          onChange={(e) => setRecent(parseInt(e.target.value))}
          className="px-2 py-1 bg-gray-800 rounded w-24"
        />
        <button onClick={onSearch} className="px-3 py-1 bg-blue-600 rounded">
          Search
        </button>
      </div>
      {loading ? (
        <div>Loading...</div>
      ) : (
        <div className="overflow-auto">
          <table className="min-w-full text-left text-sm">
            <thead>
              <tr className="bg-gray-800">
                <th className="p-2">CVE</th>
                <th className="p-2">Description</th>
                <th className="p-2">Published</th>
              </tr>
            </thead>
            <tbody>
              {vulns.map((v) => (
                <tr
                  key={v.cve.id}
                  className="hover:bg-gray-700 cursor-pointer"
                  onClick={() => setSelected(v)}
                >
                  <td className="p-2 whitespace-nowrap">{v.cve.id}</td>
                  <td className="p-2">{v.cve.descriptions?.[0]?.value}</td>
                  <td className="p-2 whitespace-nowrap">
                    {v.cve.published ? new Date(v.cve.published).toISOString().split('T')[0] : ''}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      <div className="flex justify-between items-center">
        <button
          className="px-3 py-1 bg-gray-800 rounded disabled:opacity-50"
          disabled={page <= 1}
          onClick={() => setPage((p) => Math.max(1, p - 1))}
        >
          Prev
        </button>
        <span>
          Page {page} / {totalPages || 1}
        </span>
        <button
          className="px-3 py-1 bg-gray-800 rounded disabled:opacity-50"
          disabled={page >= totalPages}
          onClick={() => setPage((p) => p + 1)}
        >
          Next
        </button>
      </div>
      {selected && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-gray-900 p-4 rounded w-11/12 md:w-2/3 lg:w-1/2 space-y-2 max-h-[80vh] overflow-y-auto">
            <h2 className="text-xl font-bold">{selected.cve.id}</h2>
            <p>{selected.cve.descriptions?.[0]?.value}</p>
            <p>Published: {selected.cve.published}</p>
            {selected.exploits.length > 0 ? (
              <div>
                <h3 className="font-semibold">Exploits</h3>
                <ul className="list-disc list-inside">
                  {selected.exploits.map((e) => (
                    <li key={e.id}>
                      <a
                        href={e.source_url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-400 underline"
                      >
                        {e.description}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <p>No exploits found.</p>
            )}
            <button className="mt-2 px-3 py-1 bg-blue-600 rounded" onClick={() => setSelected(null)}>
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CveDashboard;

