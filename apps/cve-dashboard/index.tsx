import React, { useEffect, useMemo, useState } from 'react';
import useSWR from 'swr';
import Papa from 'papaparse';
import { FixedSizeList as List, ListChildComponentProps } from 'react-window';
import { useRouter } from 'next/router';
import Fuse from 'fuse.js';

interface ExploitInfo {
  id: string;
  file: string;
  description: string;
  source_url: string;
}

interface Vulnerability {
  cve: {
    id: string;
    published?: string;
    descriptions?: { lang: string; value: string }[];
    metrics?: any;
  };
  kev: boolean;
  epss: number | null;
  severity?: string;
  exploits: ExploitInfo[];
}

const fetcher = async (url: string) => {
  const res = await fetch(url);
  const json = await res.json();
  return { data: json, headers: Object.fromEntries(res.headers.entries()), status: res.status };
};

function riskColor(v: Vulnerability): string {
  if (v.kev) return 'bg-red-900';
  if ((v.epss ?? 0) > 0.5) return 'bg-orange-900';
  switch (v.severity) {
    case 'critical':
      return 'bg-red-800';
    case 'high':
      return 'bg-red-700';
    case 'medium':
      return 'bg-yellow-700';
    case 'low':
      return 'bg-green-700';
    default:
      return '';
  }
}

const parseVector = (vector: string): Record<string, string> => {
  const parts = vector.split('/');
  const start = parts[0].startsWith('CVSS') ? 1 : 0;
  const obj: Record<string, string> = {};
  parts.slice(start).forEach((p) => {
    const [k, v] = p.split(':');
    if (k && v) obj[k] = v;
  });
  return obj;
};

const metricExamplesV3: Record<string, Record<string, string>> = {
  AV: { N: 'Network', A: 'Adjacent', L: 'Local', P: 'Physical' },
  AC: { L: 'Low', H: 'High' },
  PR: { N: 'None', L: 'Low', H: 'High' },
  UI: { N: 'None', R: 'Required' },
  S: { U: 'Unchanged', C: 'Changed' },
  C: { H: 'High', L: 'Low', N: 'None' },
  I: { H: 'High', L: 'Low', N: 'None' },
  A: { H: 'High', L: 'Low', N: 'None' },
};

const metricWeights = {
  AV: { N: 0.85, A: 0.62, L: 0.55, P: 0.2 },
  AC: { L: 0.77, H: 0.44 },
  PR: {
    N: { U: 0.85, C: 0.85 },
    L: { U: 0.62, C: 0.68 },
    H: { U: 0.27, C: 0.5 },
  },
  UI: { N: 0.85, R: 0.62 },
  C: { H: 0.56, L: 0.22, N: 0 },
  I: { H: 0.56, L: 0.22, N: 0 },
  A: { H: 0.56, L: 0.22, N: 0 },
};

function computeCvss31(vector: string): number | null {
  try {
    const m = parseVector(vector);
    const S = m.S as 'U' | 'C';
    const AV = metricWeights.AV[m.AV as keyof typeof metricWeights.AV] ?? 0;
    const AC = metricWeights.AC[m.AC as keyof typeof metricWeights.AC] ?? 0;
    const PR = (metricWeights.PR as any)[m.PR]?.[S] ?? 0;
    const UI = metricWeights.UI[m.UI as keyof typeof metricWeights.UI] ?? 0;
    const C = metricWeights.C[m.C as keyof typeof metricWeights.C] ?? 0;
    const I = metricWeights.I[m.I as keyof typeof metricWeights.I] ?? 0;
    const A = metricWeights.A[m.A as keyof typeof metricWeights.A] ?? 0;
    const exploitability = 8.22 * AV * AC * PR * UI;
    const impactSub = 1 - (1 - C) * (1 - I) * (1 - A);
    const impact =
      S === 'U'
        ? 6.42 * impactSub
        : 7.52 * (impactSub - 0.029) - 3.25 * Math.pow(impactSub - 0.02, 15);
    if (impact <= 0) return 0;
    const base =
      S === 'U'
        ? Math.min(impact + exploitability, 10)
        : Math.min(1.08 * (impact + exploitability), 10);
    return Math.ceil(base * 10) / 10;
  } catch {
    return null;
  }
}

const CveDashboard: React.FC = () => {
  const router = useRouter();
  const [keyword, setKeyword] = useState('');
  const [cpe, setCpe] = useState('');
  const [cwe, setCwe] = useState('');
  const [recent, setRecent] = useState(30);
  const [search, setSearch] = useState('');
  const [selected, setSelected] = useState<Vulnerability | null>(null);
  const [views, setViews] = useState<Record<string, any>>(() => {
    try {
      return JSON.parse(localStorage.getItem('cve_views') || '') || {};
    } catch {
      return {};
    }
  });
  const [rateInfo, setRateInfo] = useState<{ limit?: number; remaining?: number; retryAfter?: string }>({});

  // Load from query for deep links
  useEffect(() => {
    if (!router.isReady) return;
    setKeyword((router.query.keyword as string) || '');
    setCpe((router.query.cpe as string) || '');
    setCwe((router.query.cwe as string) || '');
    if (router.query.recent) setRecent(parseInt(router.query.recent as string, 10));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [router.isReady]);

  // Update URL when filters change
  useEffect(() => {
    const query: any = { keyword, cpe, cwe, recent };
    router.replace({ pathname: router.pathname, query }, undefined, { shallow: true });
  }, [keyword, cpe, cwe, recent, router]);

  const params = useMemo(() => {
    const p = new URLSearchParams({ keyword, cpe, cwe, recent: String(recent), pageSize: '200', sort: 'epss' });
    return p.toString();
  }, [keyword, cpe, cwe, recent]);

  const { data } = useSWR(`/api/cve?${params}`, fetcher, { revalidateOnFocus: false });
  const vulns: Vulnerability[] = data?.data?.vulnerabilities || [];

  useEffect(() => {
    if (data?.headers) {
      setRateInfo({
        limit: Number(data.headers['x-ratelimit-limit'] || 0),
        remaining: Number(data.headers['x-ratelimit-remaining'] || 0),
        retryAfter: data.status === 429 ? data.headers['retry-after'] : undefined,
      });
    }
  }, [data]);

  const fuse = useMemo(() => new Fuse(vulns, { keys: ['cve.id', 'cve.descriptions.0.value'], threshold: 0.3 }), [vulns]);
  const filtered = useMemo(() => (search ? fuse.search(search).map((r) => r.item) : vulns), [fuse, search, vulns]);

  const exportCsv = () => {
    const rows = filtered.map((v) => ({
      id: v.cve.id,
      description: v.cve.descriptions?.[0]?.value || '',
      severity: v.severity || '',
      epss: v.epss ?? '',
      kev: v.kev ? 'yes' : 'no',
    }));
    const csv = Papa.unparse(rows);
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'vulnerabilities.csv';
    a.click();
    URL.revokeObjectURL(url);
  };

  const exportJson = () => {
    const blob = new Blob([JSON.stringify(filtered, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'vulnerabilities.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  const saveView = () => {
    const name = prompt('View name?');
    if (!name) return;
    const newViews = { ...views, [name]: { keyword, cpe, cwe, recent } };
    setViews(newViews);
    localStorage.setItem('cve_views', JSON.stringify(newViews));
  };

  const loadView = (name: string) => {
    const v = views[name];
    if (!v) return;
    setKeyword(v.keyword);
    setCpe(v.cpe);
    setCwe(v.cwe);
    setRecent(v.recent);
  };

  const Row = ({ index, style }: ListChildComponentProps) => {
    const v = filtered[index];
    return (
      <div
        style={style}
        className={`grid grid-cols-4 gap-2 px-2 py-1 border-b border-gray-700 text-sm cursor-pointer ${riskColor(v)}`}
        onClick={() => setSelected(v)}
      >
        <div className="truncate">{v.cve.id}</div>
        <div className="truncate">{v.cve.descriptions?.[0]?.value}</div>
        <div>{v.epss ?? ''}</div>
        <div>{v.kev ? 'âœ”' : ''}</div>
      </div>
    );
  };

  return (
    <div className="p-4 text-white space-y-4">
      <div className="flex flex-wrap gap-2 items-center">
        <input value={keyword} onChange={(e) => setKeyword(e.target.value)} placeholder="Keyword" className="px-2 py-1 bg-gray-800 rounded" />
        <input value={cpe} onChange={(e) => setCpe(e.target.value)} placeholder="CPE" className="px-2 py-1 bg-gray-800 rounded" />
        <input value={cwe} onChange={(e) => setCwe(e.target.value)} placeholder="CWE" className="px-2 py-1 bg-gray-800 rounded" />
        <input type="number" value={recent} onChange={(e) => setRecent(parseInt(e.target.value, 10))} className="px-2 py-1 bg-gray-800 rounded w-24" />
        <input value={search} onChange={(e) => setSearch(e.target.value)} placeholder="Fuzzy search" className="px-2 py-1 bg-gray-800 rounded" />
        <button onClick={exportCsv} className="px-3 py-1 bg-blue-600 rounded">CSV</button>
        <button onClick={exportJson} className="px-3 py-1 bg-blue-600 rounded">JSON</button>
        <button onClick={saveView} className="px-3 py-1 bg-gray-700 rounded">Save View</button>
        <select onChange={(e) => loadView(e.target.value)} className="bg-gray-800 px-2 py-1 rounded">
          <option value="">Load View</option>
          {Object.keys(views).map((n) => (
            <option key={n}>{n}</option>
          ))}
        </select>
      </div>
      {rateInfo.limit !== undefined && (
        <div className="text-sm">Rate limit: {rateInfo.remaining}/{rateInfo.limit}</div>
      )}
      {rateInfo.retryAfter && (
        <div className="text-sm text-red-400">Rate limited. Retry after {rateInfo.retryAfter}s</div>
      )}
      <div className="grid grid-cols-4 gap-2 font-bold bg-gray-800 px-2 py-1 text-sm">
        <div>CVE</div>
        <div>Description</div>
        <div>EPSS</div>
        <div>KEV</div>
      </div>
      <div style={{ height: '60vh' }} className="bg-gray-900 overflow-hidden">
        <List height={350} itemCount={filtered.length} itemSize={40} width={'100%'}>
          {Row}
        </List>
      </div>
      {selected && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-end">
          <div className="bg-gray-900 w-full md:w-1/2 lg:w-1/3 p-4 space-y-2 overflow-y-auto">
            <h2 className="text-xl font-bold">{selected.cve.id}</h2>
            <p>{selected.cve.descriptions?.[0]?.value}</p>
            <p>Published: {selected.cve.published}</p>
            <p>
              CVSS v3.1: {computeCvss31(selected.cve.metrics?.cvssMetricV31?.[0]?.cvssData?.vectorString || '') ?? 'N/A'}
            </p>
            {selected.cve.metrics?.cvssMetricV31?.[0]?.cvssData?.vectorString && (
              <div>
                <p className="font-semibold">Vector Breakdown</p>
                <ul className="list-disc list-inside">
                  {Object.entries(
                    parseVector(selected.cve.metrics!.cvssMetricV31[0].cvssData.vectorString),
                  ).map(([k, v]) => (
                    <li key={k}>
                      {k}:{v} - {metricExamplesV3[k]?.[v]}
                    </li>
                  ))}
                </ul>
              </div>
            )}
            <p>
              CVSS v4: {selected.cve.metrics?.cvssMetricV40?.[0]?.cvssData?.baseScore ?? 'N/A'}
            </p>
            <p>EPSS: {selected.epss ?? 'N/A'}</p>
            <p>KEV: {selected.kev ? 'Yes' : 'No'}</p>
            <p>
              <a
                href={`https://osv.dev/vulnerability/${selected.cve.id}`}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-400 underline"
              >
                OSV Entry
              </a>
            </p>
            {selected.exploits.length > 0 ? (
              <div>
                <h3 className="font-semibold">Exploits</h3>
                <ul className="list-disc list-inside space-y-1">
                  {selected.exploits.map((e) => (
                    <li key={e.id}>
                      <a href={e.source_url} target="_blank" rel="noopener noreferrer" className="text-blue-400 underline">
                        {e.description}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <p>No exploits found.</p>
            )}
            <button className="mt-2 px-3 py-1 bg-blue-600 rounded" onClick={() => setSelected(null)}>
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CveDashboard;
