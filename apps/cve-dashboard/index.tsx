import React, { useEffect, useMemo, useState } from 'react';
import useSWR from 'swr';
import Papa from 'papaparse';
import { FixedSizeList as List, ListChildComponentProps } from 'react-window';
import { useRouter } from 'next/router';

interface ExploitInfo {
  id: string;
  file: string;
  description: string;
  source_url: string;
}

interface Vulnerability {
  cve: {
    id: string;
    published?: string;
    descriptions?: { lang: string; value: string }[];
    metrics?: any;
  };
  kev: boolean;
  epss: number | null;
  severity?: string;
  exploits: ExploitInfo[];
}

const fetcher = (url: string) => fetch(url).then((r) => r.json());

function riskColor(v: Vulnerability): string {
  if (v.kev) return 'bg-red-900';
  if ((v.epss ?? 0) > 0.5) return 'bg-orange-900';
  switch (v.severity) {
    case 'critical':
      return 'bg-red-800';
    case 'high':
      return 'bg-red-700';
    case 'medium':
      return 'bg-yellow-700';
    case 'low':
      return 'bg-green-700';
    default:
      return '';
  }
}

const CveDashboard: React.FC = () => {
  const router = useRouter();
  const [keyword, setKeyword] = useState('');
  const [cpe, setCpe] = useState('');
  const [cwe, setCwe] = useState('');
  const [recent, setRecent] = useState(30);
  const [selected, setSelected] = useState<Vulnerability | null>(null);
  const [views, setViews] = useState<Record<string, any>>(() => {
    try {
      return JSON.parse(localStorage.getItem('cve_views') || '') || {};
    } catch {
      return {};
    }
  });

  // Load from query for deep links
  useEffect(() => {
    if (!router.isReady) return;
    setKeyword((router.query.keyword as string) || '');
    setCpe((router.query.cpe as string) || '');
    setCwe((router.query.cwe as string) || '');
    if (router.query.recent) setRecent(parseInt(router.query.recent as string, 10));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [router.isReady]);

  // Update URL when filters change
  useEffect(() => {
    const query: any = { keyword, cpe, cwe, recent };
    router.replace({ pathname: router.pathname, query }, undefined, { shallow: true });
  }, [keyword, cpe, cwe, recent, router]);

  const params = useMemo(() => {
    const p = new URLSearchParams({ keyword, cpe, cwe, recent: String(recent), pageSize: '200', sort: 'epss' });
    return p.toString();
  }, [keyword, cpe, cwe, recent]);

  const { data } = useSWR(`/api/cve?${params}`, fetcher, { revalidateOnFocus: false });
  const vulns: Vulnerability[] = data?.vulnerabilities || [];

  const exportCsv = () => {
    const rows = vulns.map((v) => ({
      id: v.cve.id,
      description: v.cve.descriptions?.[0]?.value || '',
      severity: v.severity || '',
      epss: v.epss ?? '',
      kev: v.kev ? 'yes' : 'no',
    }));
    const csv = Papa.unparse(rows);
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'vulnerabilities.csv';
    a.click();
    URL.revokeObjectURL(url);
  };

  const exportJson = () => {
    const blob = new Blob([JSON.stringify(vulns, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'vulnerabilities.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  const saveView = () => {
    const name = prompt('View name?');
    if (!name) return;
    const newViews = { ...views, [name]: { keyword, cpe, cwe, recent } };
    setViews(newViews);
    localStorage.setItem('cve_views', JSON.stringify(newViews));
  };

  const loadView = (name: string) => {
    const v = views[name];
    if (!v) return;
    setKeyword(v.keyword);
    setCpe(v.cpe);
    setCwe(v.cwe);
    setRecent(v.recent);
  };

  const Row = ({ index, style }: ListChildComponentProps) => {
    const v = vulns[index];
    return (
      <div
        style={style}
        className={`grid grid-cols-4 gap-2 px-2 py-1 border-b border-gray-700 text-sm cursor-pointer ${riskColor(v)}`}
        onClick={() => setSelected(v)}
      >
        <div className="truncate">{v.cve.id}</div>
        <div className="truncate">{v.cve.descriptions?.[0]?.value}</div>
        <div>{v.epss ?? ''}</div>
        <div>{v.kev ? 'âœ”' : ''}</div>
      </div>
    );
  };

  return (
    <div className="p-4 text-white space-y-4">
      <div className="flex flex-wrap gap-2 items-center">
        <input value={keyword} onChange={(e) => setKeyword(e.target.value)} placeholder="Keyword" className="px-2 py-1 bg-gray-800 rounded" />
        <input value={cpe} onChange={(e) => setCpe(e.target.value)} placeholder="CPE" className="px-2 py-1 bg-gray-800 rounded" />
        <input value={cwe} onChange={(e) => setCwe(e.target.value)} placeholder="CWE" className="px-2 py-1 bg-gray-800 rounded" />
        <input type="number" value={recent} onChange={(e) => setRecent(parseInt(e.target.value, 10))} className="px-2 py-1 bg-gray-800 rounded w-24" />
        <button onClick={exportCsv} className="px-3 py-1 bg-blue-600 rounded">CSV</button>
        <button onClick={exportJson} className="px-3 py-1 bg-blue-600 rounded">JSON</button>
        <button onClick={saveView} className="px-3 py-1 bg-gray-700 rounded">Save View</button>
        <select onChange={(e) => loadView(e.target.value)} className="bg-gray-800 px-2 py-1 rounded">
          <option value="">Load View</option>
          {Object.keys(views).map((n) => (
            <option key={n}>{n}</option>
          ))}
        </select>
      </div>
      <div className="grid grid-cols-4 gap-2 font-bold bg-gray-800 px-2 py-1 text-sm">
        <div>CVE</div>
        <div>Description</div>
        <div>EPSS</div>
        <div>KEV</div>
      </div>
      <div style={{ height: '60vh' }} className="bg-gray-900 overflow-hidden">
        <List height={350} itemCount={vulns.length} itemSize={40} width={'100%'}>
          {Row}
        </List>
      </div>
      {selected && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-end">
          <div className="bg-gray-900 w-full md:w-1/2 lg:w-1/3 p-4 space-y-2 overflow-y-auto">
            <h2 className="text-xl font-bold">{selected.cve.id}</h2>
            <p>{selected.cve.descriptions?.[0]?.value}</p>
            <p>Published: {selected.cve.published}</p>
            <p>CVSS v3.1: {selected.cve.metrics?.cvssMetricV31?.[0]?.cvssData?.baseScore ?? 'N/A'}</p>
            <p>CVSS v4: {selected.cve.metrics?.cvssMetricV40?.[0]?.cvssData?.baseScore ?? 'N/A'}</p>
            <p>EPSS: {selected.epss ?? 'N/A'}</p>
            <p>KEV: {selected.kev ? 'Yes' : 'No'}</p>
            {selected.exploits.length > 0 ? (
              <div>
                <h3 className="font-semibold">Exploits</h3>
                <ul className="list-disc list-inside space-y-1">
                  {selected.exploits.map((e) => (
                    <li key={e.id}>
                      <a href={e.source_url} target="_blank" rel="noopener noreferrer" className="text-blue-400 underline">
                        {e.description}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <p>No exploits found.</p>
            )}
            <button className="mt-2 px-3 py-1 bg-blue-600 rounded" onClick={() => setSelected(null)}>
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CveDashboard;
