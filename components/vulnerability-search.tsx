import { useState, useEffect } from 'react';
import useSWR from 'swr';
import Papa from 'papaparse';
import { useRouter } from 'next/router';

interface Vuln {
  cve: { id: string; descriptions?: { value: string }[] };
  kev: boolean;
  epss: number | null;
  severity?: string;
}

// IndexedDB helpers
const openDB = () =>
  new Promise<IDBDatabase | null>((resolve, reject) => {
    if (typeof window === 'undefined') return resolve(null);
    const req = indexedDB.open('vuln-cache', 1);
    req.onupgradeneeded = () => req.result.createObjectStore('responses');
    req.onsuccess = () => resolve(req.result);
    req.onerror = () => reject(req.error);
  });

const idbGet = async (key: string) => {
  const db = await openDB();
  if (!db) return null;
  return new Promise<any | null>((resolve, reject) => {
    const tx = db.transaction('responses', 'readonly');
    const store = tx.objectStore('responses');
    const req = store.get(key);
    req.onsuccess = () => resolve(req.result || null);
    req.onerror = () => reject(req.error);
  });
};

const idbSet = async (key: string, val: any) => {
  const db = await openDB();
  if (!db) return;
  return new Promise<void>((resolve, reject) => {
    const tx = db.transaction('responses', 'readwrite');
    const store = tx.objectStore('responses');
    const req = store.put(val, key);
    req.onsuccess = () => resolve();
    req.onerror = () => reject(req.error);
  });
};

const fetcher = async (url: string) => {
  const cached = await idbGet(url);
  if (cached && cached.expiry > Date.now()) return cached.data;
  const res = await fetch(url);
  const data = await res.json();
  await idbSet(url, { data, expiry: Date.now() + 3600 * 1000 });
  return data;
};

const allColumns = [
  { key: 'id', label: strings.columns.id },
  { key: 'description', label: strings.columns.description },
  { key: 'severity', label: strings.columns.severity },
  { key: 'epss', label: strings.columns.epss },
  { key: 'kev', label: strings.columns.kev },
];

export default function VulnerabilitySearch() {
  const router = useRouter();
  const [keyword, setKeyword] = useState('');
  const [domain, setDomain] = useState('');
  const [vendor, setVendor] = useState('');
  const [product, setProduct] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [cvss, setCvss] = useState('');
  const [epss, setEpss] = useState('');
  const [kev, setKev] = useState(false);
  const [severity, setSeverity] = useState<string[]>([]);
  const [columns, setColumns] = useState<string[]>(() => {
    try {
      return (
        JSON.parse(localStorage.getItem('vuln_columns') || '') || [
          'id',
          'description',
          'epss',
          'kev',
        ]
      );
    } catch {
      return ['id', 'description', 'epss', 'kev'];
    }
  });
  const [views, setViews] = useState<Record<string, any>>(() => {
    try {
      return JSON.parse(localStorage.getItem('vuln_views') || '') || {};
    } catch {
      return {};
    }
  });

  useEffect(() => {
    if (!router.isReady) return;
    const q = router.query;
    setKeyword((q.keyword as string) || '');
    setDomain((q.domain as string) || '');
    setVendor((q.vendor as string) || '');
    setProduct((q.product as string) || '');
    setStartDate((q.startDate as string) || '');
    setEndDate((q.endDate as string) || '');
    setCvss((q.cvss as string) || '');
    setEpss((q.epss as string) || '');
    setKev(q.kev === '1' || q.kev === 'true');
    const sev = (q.severity as string) || '';
    setSeverity(sev ? sev.split(',') : []);
  }, [router.isReady]);

  useEffect(() => {
    const params = new URLSearchParams();
    if (keyword) params.set('keyword', keyword);
    if (domain) params.set('domain', domain);
    if (vendor) params.set('vendor', vendor);
    if (product) params.set('product', product);
    if (startDate) params.set('startDate', startDate);
    if (endDate) params.set('endDate', endDate);
    if (cvss) params.set('cvss', cvss);
    if (epss) params.set('epss', epss);
    if (kev) params.set('kev', '1');
    if (severity.length) params.set('severity', severity.join(','));
    router.replace(`${router.pathname}?${params.toString()}`, undefined, { shallow: true });
  }, [keyword, domain, vendor, product, startDate, endDate, cvss, epss, kev, severity, router]);

  const params = new URLSearchParams();
  if (keyword) params.set('keyword', keyword);
  if (domain) params.set('domain', domain);
  if (vendor) params.set('vendor', vendor);
  if (product) params.set('product', product);
  if (startDate) params.set('startDate', startDate);
  if (endDate) params.set('endDate', endDate);
  if (cvss) params.set('cvss', cvss);
  if (epss) params.set('epss', epss);
  if (kev) params.set('kev', '1');
  if (severity.length) params.set('severity', severity.join(','));
  params.set('sort', 'epss');

  const { data } = useSWR(`/api/cve?${params.toString()}`, fetcher, {
    revalidateOnFocus: false,
  });

  const allColumns = [
    { key: 'id', label: strings.columns.id },
    { key: 'description', label: strings.columns.description },
    { key: 'severity', label: strings.columns.severity },
    { key: 'epss', label: strings.columns.epss },
    { key: 'kev', label: strings.columns.kev },
  ];

  const severityOptions = ['critical', 'high', 'medium', 'low'] as const;

  useEffect(() => {
    localStorage.setItem('vuln_columns', JSON.stringify(columns));
  }, [columns]);

  const saveView = () => {
    const name = prompt(strings.viewNamePrompt);
    if (!name) return;
    const newViews = {
      ...views,
      [name]: {
        keyword,
        domain,
        vendor,
        product,
        startDate,
        endDate,
        cvss,
        epss,
        kev,
        severity,
        columns,
      },

    };
    setViews(newViews);
    localStorage.setItem('vuln_views', JSON.stringify(newViews));
  };

  const loadView = (name: string) => {
    const v = views[name];
    if (!v) return;
    setKeyword(v.keyword);
    setDomain(v.domain);
    setVendor(v.vendor || '');
    setProduct(v.product || '');
    setStartDate(v.startDate || '');
    setEndDate(v.endDate || '');
    setCvss(v.cvss || '');
    setEpss(v.epss || '');
    setKev(!!v.kev);
    setSeverity(v.severity);
    setColumns(v.columns);
  };

  const exportCsv = () => {
    if (!data) return;
    const rows = data.vulnerabilities.map((v: Vuln) => ({
      id: v.cve.id,
      description: v.cve.descriptions?.[0]?.value || '',
      severity: v.severity || '',
      epss: v.epss ?? '',
      kev: v.kev ? strings.yes : strings.no,
    }));
    const csv = Papa.unparse(rows);
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = strings.csvFileName;
    a.click();
    URL.revokeObjectURL(url);
  };

  const toggleColumn = (key: string) => {
    setColumns((cols) =>
      cols.includes(key) ? cols.filter((c) => c !== key) : [...cols, key]
    );
  };

  const toggleSeverity = (sev: string) => {
    setSeverity((s) =>
      s.includes(sev) ? s.filter((x) => x !== sev) : [...s, sev]
    );
  };

  const vulns: Vuln[] = data?.vulnerabilities || [];

  return (
    <div className="p-4 space-y-4">
      <div className="flex flex-wrap gap-2">
        <input
          value={keyword}
          onChange={(e) => setKeyword(e.target.value)}
          placeholder={strings.keyword}
          aria-label={strings.keyword}
          className="border p-1 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"

        />
        <input
          value={domain}
          onChange={(e) => setDomain(e.target.value)}
          placeholder={strings.domain}
          aria-label={strings.domain}
          className="border p-1 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        />
        <input
          value={vendor}
          onChange={(e) => setVendor(e.target.value)}
          placeholder="Vendor"
          className="border p-1"
        />
        <input
          value={product}
          onChange={(e) => setProduct(e.target.value)}
          placeholder="Product"
          className="border p-1"
        />
        <input
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          className="border p-1"
        />
        <input
          type="date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          className="border p-1"
        />
        <input
          type="number"
          step="0.1"
          value={cvss}
          onChange={(e) => setCvss(e.target.value)}
          placeholder="CVSS ≥"
          className="border p-1 w-24"
        />
        <input
          type="number"
          step="0.001"
          value={epss}
          onChange={(e) => setEpss(e.target.value)}
          placeholder="EPSS ≥"
          className="border p-1 w-24"
        />
        <label className="flex items-center gap-1">
          <input
            type="checkbox"
            checked={kev}
            onChange={(e) => setKev(e.target.checked)}
          />
          KEV
        </label>
        {['critical', 'high', 'medium', 'low'].map((sev) => (
          <label key={sev} className="flex items-center gap-1">

            <input
              type="checkbox"
              checked={severity.includes(sev.key)}
              onChange={() => toggleSeverity(sev.key)}
              aria-label={sev.label}
              className="focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            {sev.label}

          </label>
        ))}
        <button
          onClick={saveView}
          className="border px-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"

          aria-label={strings.saveView}
        >
          {strings.saveView}
        </button>
        <select
          onChange={(e) => loadView(e.target.value)}
          className="border focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          aria-label={strings.loadView}
        >
          <option value="">{strings.loadView}</option>

          {Object.keys(views).map((n) => (
            <option key={n}>{n}</option>
          ))}
        </select>
        <button
          onClick={exportCsv}
          className="border px-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          aria-label={strings.exportCsv}
        >
          {strings.exportCsv}

        </button>
      </div>
      <div className="flex gap-2 flex-wrap">
        {allColumns.map((col) => (
          <label key={col.key} className="flex items-center gap-1">
            <input
              type="checkbox"
              checked={columns.includes(col.key)}
              onChange={() => toggleColumn(col.key)}
              aria-label={col.label}
              className="focus:outline-none focus:ring-2 focus:ring-blue-500"

            />
            {col.label}
          </label>
        ))}
      </div>
      <table
        className="min-w-full border"
        role="table"
        aria-label={strings.tableLabel}
      >
        <thead>
          <tr>
            {columns.includes('id') && (
              <th className="border px-2" scope="col">
                {strings.columns.id}
              </th>
            )}
            {columns.includes('description') && (
              <th className="border px-2" scope="col">
                {strings.columns.description}
              </th>
            )}
            {columns.includes('severity') && (
              <th className="border px-2" scope="col">
                {strings.columns.severity}
              </th>
            )}
            {columns.includes('epss') && (
              <th className="border px-2" scope="col">
                {strings.columns.epss}
              </th>
            )}
            {columns.includes('kev') && (
              <th className="border px-2" scope="col">
                {strings.columns.kev}
              </th>

            )}
          </tr>
        </thead>
        <tbody>
          {vulns.map((v) => (
            <tr key={v.cve.id} className="border-t">
              {columns.includes('id') && (
                <td className="border px-2">{v.cve.id}</td>
              )}
              {columns.includes('description') && (
                <td className="border px-2">
                  {v.cve.descriptions?.[0]?.value || ''}
                </td>
              )}
              {columns.includes('severity') && (
                <td className="border px-2">{v.severity || ''}</td>
              )}
              {columns.includes('epss') && (
                <td className="border px-2">{v.epss ?? ''}</td>
              )}
              {columns.includes('kev') && (
                <td className="border px-2">{v.kev ? '✔' : ''}</td>
              )}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
