import { useState, useEffect } from 'react';
import useSWR from 'swr';
import Papa from 'papaparse';
import strings from '../locales/en/vulnerability-search.json';

interface Vuln {
  cve: { id: string; descriptions?: { value: string }[] };
  kev: boolean;
  epss: number | null;
  severity?: string;
}

const fetcher = (url: string) => fetch(url).then((r) => r.json());

export default function VulnerabilitySearch() {
  const [keyword, setKeyword] = useState('');
  const [domain, setDomain] = useState('');
  const [severity, setSeverity] = useState<string[]>([]);
  const [columns, setColumns] = useState<string[]>(() => {
    try {
      return (
        JSON.parse(localStorage.getItem('vuln_columns') || '') || [
          'id',
          'description',
          'epss',
          'kev',
        ]
      );
    } catch {
      return ['id', 'description', 'epss', 'kev'];
    }
  });
  const [views, setViews] = useState<Record<string, any>>(() => {
    try {
      return JSON.parse(localStorage.getItem('vuln_views') || '') || {};
    } catch {
      return {};
    }
  });

  const params = new URLSearchParams({
    keyword,
    domain,
    severity: severity.join(','),
    sort: 'epss',
  });
  const { data } = useSWR(`/api/cve?${params.toString()}`, fetcher, {
    revalidateOnFocus: false,
  });

  const allColumns = [
    { key: 'id', label: strings.columns.id },
    { key: 'description', label: strings.columns.description },
    { key: 'severity', label: strings.columns.severity },
    { key: 'epss', label: strings.columns.epss },
    { key: 'kev', label: strings.columns.kev },
  ];

  const severityOptions = ['critical', 'high', 'medium', 'low'] as const;

  useEffect(() => {
    localStorage.setItem('vuln_columns', JSON.stringify(columns));
  }, [columns]);

  const saveView = () => {
    const name = prompt(strings.viewNamePrompt);
    if (!name) return;
    const newViews = {
      ...views,
      [name]: { keyword, domain, severity, columns },
    };
    setViews(newViews);
    localStorage.setItem('vuln_views', JSON.stringify(newViews));
  };

  const loadView = (name: string) => {
    const v = views[name];
    if (!v) return;
    setKeyword(v.keyword);
    setDomain(v.domain);
    setSeverity(v.severity);
    setColumns(v.columns);
  };

  const exportCsv = () => {
    if (!data) return;
    const rows = data.vulnerabilities.map((v: Vuln) => ({
      id: v.cve.id,
      description: v.cve.descriptions?.[0]?.value || '',
      severity: v.severity || '',
      epss: v.epss ?? '',
      kev: v.kev ? strings.yes : strings.no,
    }));
    const csv = Papa.unparse(rows);
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'vulnerabilities.csv';
    a.click();
    URL.revokeObjectURL(url);
  };

  const toggleColumn = (key: string) => {
    setColumns((cols) =>
      cols.includes(key) ? cols.filter((c) => c !== key) : [...cols, key]
    );
  };

  const toggleSeverity = (sev: string) => {
    setSeverity((s) =>
      s.includes(sev) ? s.filter((x) => x !== sev) : [...s, sev]
    );
  };

  const vulns: Vuln[] = data?.vulnerabilities || [];

  return (
    <div className="p-4 space-y-4">
      <div className="flex flex-wrap gap-2">
        <input
          value={keyword}
          onChange={(e) => setKeyword(e.target.value)}
          placeholder={strings.keyword}
          aria-label={strings.keyword}
          className="border p-1 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500"
        />
        <input
          value={domain}
          onChange={(e) => setDomain(e.target.value)}
          placeholder={strings.domain}
          aria-label={strings.domain}
          className="border p-1 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500"
        />
        {severityOptions.map((sev) => (
          <label key={sev} className="flex items-center gap-1">
            <input
              type="checkbox"
              checked={severity.includes(sev)}
              onChange={() => toggleSeverity(sev)}
              className="focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500"
            />
            {strings.severities[sev]}
          </label>
        ))}
        <button
          onClick={saveView}
          className="border px-2 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500"
          aria-label={strings.saveView}
        >
          {strings.saveView}
        </button>
        <select
          onChange={(e) => loadView(e.target.value)}
          className="border focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500"
          aria-label={strings.loadView}
        >
          <option value="">{strings.loadViewOption}</option>
          {Object.keys(views).map((n) => (
            <option key={n}>{n}</option>
          ))}
        </select>
        <button
          onClick={exportCsv}
          className="border px-2 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500"
          aria-label={strings.csv}
        >
          {strings.csv}
        </button>
      </div>
      <div className="flex gap-2 flex-wrap">
        {allColumns.map((col) => (
          <label key={col.key} className="flex items-center gap-1">
            <input
              type="checkbox"
              checked={columns.includes(col.key)}
              onChange={() => toggleColumn(col.key)}
              className="focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500"
            />
            {col.label}
          </label>
        ))}
      </div>
      <table className="min-w-full border">
        <thead>
          <tr>
            {columns.includes('id') && (
              <th className="border px-2">{strings.columns.id}</th>
            )}
            {columns.includes('description') && (
              <th className="border px-2">{strings.columns.description}</th>
            )}
            {columns.includes('severity') && (
              <th className="border px-2">{strings.columns.severity}</th>
            )}
            {columns.includes('epss') && (
              <th className="border px-2">{strings.columns.epss}</th>
            )}
            {columns.includes('kev') && (
              <th className="border px-2">{strings.columns.kev}</th>
            )}
          </tr>
        </thead>
        <tbody>
          {vulns.map((v) => (
            <tr key={v.cve.id} className="border-t">
              {columns.includes('id') && (
                <td className="border px-2">{v.cve.id}</td>
              )}
              {columns.includes('description') && (
                <td className="border px-2">
                  {v.cve.descriptions?.[0]?.value || ''}
                </td>
              )}
              {columns.includes('severity') && (
                <td className="border px-2">{v.severity || ''}</td>
              )}
              {columns.includes('epss') && (
                <td className="border px-2">{v.epss ?? ''}</td>
              )}
              {columns.includes('kev') && (
                <td className="border px-2">{v.kev ? 'âœ”' : ''}</td>
              )}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
