import React, { useState, useRef } from 'react';
import { DndContext, useDraggable } from '@dnd-kit/core';
import { CSS } from '@dnd-kit/utilities';
import { toPng } from 'html-to-image';

interface Node {
  id: string;
  x: number;
  y: number;
  label: string;
}

interface Edge {
  id: string;
  from: string;
  to: string;
  label: string;
}

const NODE_WIDTH = 120;
const NODE_HEIGHT = 40;

const DraggableNode: React.FC<{ node: Node; onClick: (id: string) => void; onDoubleClick: (id: string) => void; selected: boolean }> = ({ node, onClick, onDoubleClick, selected }) => {
  const { attributes, listeners, setNodeRef, transform } = useDraggable({ id: node.id });
  const dx = node.x + (transform?.x ?? 0);
  const dy = node.y + (transform?.y ?? 0);
  const style = {
    width: NODE_WIDTH,
    height: NODE_HEIGHT,
    // Avoid dnd-kit type mismatch by emitting the transform string directly
    transform: `translate3d(${dx}px, ${dy}px, 0)`,
  };
  return (
    <div
      ref={setNodeRef}
      {...attributes}
      {...listeners}
      onClick={() => onClick(node.id)}
      onDoubleClick={() => onDoubleClick(node.id)}
      className={`absolute bg-blue-200 text-black px-2 py-1 rounded cursor-move select-none ${selected ? 'ring-2 ring-blue-500' : ''}`}
      style={style}
    >
      {node.label}
    </div>
  );
};

const ExploitExplainer: React.FC = () => {
  const [nodes, setNodes] = useState<Node[]>([]);
  const [edges, setEdges] = useState<Edge[]>([]);
  const [connectStart, setConnectStart] = useState<string | null>(null);
  const canvasRef = useRef<HTMLDivElement>(null);

  const addNode = () => {
    const id = `n${Date.now()}`;
    setNodes([...nodes, { id, x: 40, y: 40, label: `Node ${nodes.length + 1}` }]);
  };

  const updatePosition = (id: string, x: number, y: number) => {
    setNodes(nodes.map((n) => (n.id === id ? { ...n, x, y } : n)));
  };

  const handleNodeClick = (id: string) => {
    if (connectStart && connectStart !== id) {
      const edgeId = `e${Date.now()}`;
      setEdges([...edges, { id: edgeId, from: connectStart, to: id, label: '' }]);
      setConnectStart(null);
    } else {
      setConnectStart(id);
    }
  };

  const editNode = (id: string) => {
    const current = nodes.find((n) => n.id === id);
    const label = window.prompt('Node label', current?.label || '');
    if (label !== null) {
      setNodes(nodes.map((n) => (n.id === id ? { ...n, label } : n)));
    }
  };

  const exportPng = async () => {
    if (canvasRef.current) {
      const dataUrl = await toPng(canvasRef.current);
      const link = document.createElement('a');
      link.href = dataUrl;
      link.download = 'exploit-flow.png';
      link.click();
    }
  };

  const exportJson = () => {
    const data = { nodes, edges };
    const blob = new Blob([JSON.stringify(data, null, 2)], {
      type: 'application/json',
    });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'exploit-flow.json';
    link.click();
  };

  const handleDragEnd = (event: any) => {
    const { id, delta } = event;
    const node = nodes.find((n) => n.id === id);
    if (!node) return;
    updatePosition(id, node.x + delta.x, node.y + delta.y);
  };

  return (
    <DndContext onDragEnd={handleDragEnd}>
    <div className="h-full w-full flex flex-col bg-ub-cool-grey text-white p-2">
      <div className="mb-2 space-x-2">
        <button
          onClick={addNode}
          className="bg-gray-700 hover:bg-gray-600 px-2 rounded"
        >
          Add Node
        </button>
        <button
          onClick={exportPng}
          className="bg-gray-700 hover:bg-gray-600 px-2 rounded"
        >
          Export PNG
        </button>
        <button
          onClick={exportJson}
          className="bg-gray-700 hover:bg-gray-600 px-2 rounded"
        >
          Export JSON
        </button>
      </div>
      <div
        ref={canvasRef}
        className="relative flex-1 bg-white rounded overflow-hidden"
      >
        <svg className="absolute inset-0 pointer-events-none">
          <defs>
            <marker
              id="arrow"
              markerWidth="10"
              markerHeight="10"
              refX="10"
              refY="5"
              orient="auto"
              markerUnits="strokeWidth"
            >
              <path d="M0,0 L10,5 L0,10 z" fill="#000" />
            </marker>
          </defs>
          {edges.map((edge) => {
            const from = nodes.find((n) => n.id === edge.from);
            const to = nodes.find((n) => n.id === edge.to);
            if (!from || !to) return null;
            const x1 = from.x + NODE_WIDTH / 2;
            const y1 = from.y + NODE_HEIGHT / 2;
            const x2 = to.x + NODE_WIDTH / 2;
            const y2 = to.y + NODE_HEIGHT / 2;
            const mx = (x1 + x2) / 2;
            const my = (y1 + y2) / 2;
            return (
              <g key={edge.id}>
                <line
                  x1={x1}
                  y1={y1}
                  x2={x2}
                  y2={y2}
                  stroke="#000"
                  strokeWidth={2}
                  markerEnd="url(#arrow)"
                />
                {edge.label && (
                  <text x={mx} y={my - 5} textAnchor="middle" fill="#000">
                    {edge.label}
                  </text>
                )}
              </g>
            );
          })}
        </svg>
        {nodes.map((node) => (
          <DraggableNode
            key={node.id}
            node={node}
            onClick={handleNodeClick}
            onDoubleClick={editNode}
            selected={connectStart === node.id}
          />
        ))}
      </div>
      <div className="mt-2 text-sm">
        {connectStart
          ? 'Select a target node to finish the arrow'
          : 'Click one node then another to draw an arrow'}
      </div>
    </div>
    </DndContext>
  );
};

export default ExploitExplainer;
export const displayExploitExplainer = () => <ExploitExplainer />;

