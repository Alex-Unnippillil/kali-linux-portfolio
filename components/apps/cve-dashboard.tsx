import React, { useState } from 'react';
import Papa from 'papaparse';
import { rateLimitedFetch } from '@lib/rateLimitedFetch';
import { parseCvss } from '@lib/cvss';

interface CvssMetric {
  cvssData: { vectorString: string; baseScore: number; baseSeverity?: string };
}

interface Vulnerability {
  cve: {
    id: string;
    descriptions?: { value: string }[];
    metrics?: {
      cvssMetricV31?: CvssMetric[];
      cvssMetricV40?: CvssMetric[];
    };
    references?: { reference_data?: { url: string }[] };
  };
}

const perPage = 20;

export default function CveDashboard() {
  const [cveId, setCveId] = useState('');
  const [cpe, setCpe] = useState('');
  const [vendor, setVendor] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [severity, setSeverity] = useState('');
  const [page, setPage] = useState(0);
  const [vulns, setVulns] = useState<Vulnerability[]>([]);
  const [total, setTotal] = useState(0);
  const [error, setError] = useState<string | null>(null);

  const buildUrl = () => {
    const url = new URL('https://services.nvd.nist.gov/rest/json/cves/2.0');
    if (cveId) url.searchParams.set('cveId', cveId);
    if (cpe) url.searchParams.set('cpeName', cpe);
    if (vendor) url.searchParams.set('vendor', vendor);
    if (startDate) url.searchParams.set('pubStartDate', `${startDate}T00:00:00.000`);
    if (endDate) url.searchParams.set('pubEndDate', `${endDate}T00:00:00.000`);
    if (severity) url.searchParams.set('cvssV3Severity', severity.toUpperCase());
    url.searchParams.set('startIndex', String(page * perPage));
    url.searchParams.set('resultsPerPage', String(perPage));
    return url.toString();
  };

  const search = async () => {
    try {
      setError(null);
      const data = await rateLimitedFetch(buildUrl());
      setVulns(data.vulnerabilities || []);
      setTotal(data.totalResults || 0);
    } catch (e: any) {
      setError(e.message || 'Request failed');
      setVulns([]);
      setTotal(0);
    }
  };

  const exportCsv = () => {
    const rows = vulns.map((v) => ({
      id: v.cve.id,
      description: v.cve.descriptions?.[0]?.value || '',
    }));
    const csv = Papa.unparse(rows);
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'cves.csv';
    a.click();
    URL.revokeObjectURL(url);
  };

  const exportJson = () => {
    const blob = new Blob([JSON.stringify(vulns, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'cves.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  const renderCvss = (vector?: string) => {
    if (!vector) return '';
    const info = parseCvss(vector);
    if (!info) return '';
    const parts = [`Vector: ${vector}`, `Score: ${info.score.toFixed(1)}`];
    if (info.impact !== null && info.exploitability !== null) {
      parts.push(`Impact: ${info.impact.toFixed(1)}`, `Exploitability: ${info.exploitability.toFixed(1)}`);
    }
    return (
      <span title={parts.join('\n')}>
        {info.score.toFixed(1)}
      </span>
    );
  };

  return (
    <div className="p-4 space-y-4 text-sm">
      <div className="flex flex-wrap gap-2">
        <input
          value={cveId}
          onChange={(e) => setCveId(e.target.value)}
          placeholder="CVE-2024-1234"
          className="border p-1"
        />
        <input
          value={cpe}
          onChange={(e) => setCpe(e.target.value)}
          placeholder="cpe:2.3:a:vendor:product:*"
          className="border p-1"
        />
        <input
          value={vendor}
          onChange={(e) => setVendor(e.target.value)}
          placeholder="Vendor"
          className="border p-1"
        />
        <input
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          className="border p-1"
        />
        <input
          type="date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          className="border p-1"
        />
        <select
          value={severity}
          onChange={(e) => setSeverity(e.target.value)}
          className="border p-1"
        >
          <option value="">Severity</option>
          <option value="LOW">Low</option>
          <option value="MEDIUM">Medium</option>
          <option value="HIGH">High</option>
          <option value="CRITICAL">Critical</option>
        </select>
        <button onClick={() => { setPage(0); search(); }} className="border px-2">
          Search
        </button>
        <button onClick={exportCsv} className="border px-2">CSV</button>
        <button onClick={exportJson} className="border px-2">JSON</button>
      </div>
      {error && <div className="text-red-500">{error}</div>}
      <table className="w-full text-xs border">
        <thead>
          <tr>
            <th className="border px-1">CVE</th>
            <th className="border px-1">Description</th>
            <th className="border px-1" title="CVSS v3.1 vector and score">CVSS v3.1</th>
            <th className="border px-1" title="CVSS v4.0 vector and score">CVSS v4.0</th>
            <th className="border px-1" title="Exploit Prediction Scoring System">EPSS</th>
            <th className="border px-1">Refs</th>
          </tr>
        </thead>
        <tbody>
          {vulns.map((v) => {
            const v31 = v.cve.metrics?.cvssMetricV31?.[0];
            const v40 = v.cve.metrics?.cvssMetricV40?.[0];
            return (
              <tr key={v.cve.id} className="border-t">
                <td className="border px-1">{v.cve.id}</td>
                <td className="border px-1">
                  {v.cve.descriptions?.[0]?.value || ''}
                </td>
                <td className="border px-1">{renderCvss(v31?.cvssData.vectorString)}</td>
                <td className="border px-1">{renderCvss(v40?.cvssData.vectorString)}</td>
                <td className="border px-1" title="EPSS score placeholder">--</td>
                <td className="border px-1">
                  {v.cve.references?.reference_data?.map((r, i) => (
                    <a
                      key={i}
                      href={r.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 underline mr-1"
                    >
                      [{i + 1}]
                    </a>
                  ))}
                </td>
              </tr>
            );
          })}
          {vulns.length === 0 && (
            <tr>
              <td colSpan={6} className="text-center p-2">
                No results
              </td>
            </tr>
          )}
        </tbody>
      </table>
      <div className="flex gap-2">
        <button
          onClick={() => setPage((p) => Math.max(0, p - 1))}
          disabled={page === 0}
          className="border px-2"
        >
          Prev
        </button>
        <button
          onClick={() => setPage((p) => p + 1)}
          disabled={(page + 1) * perPage >= total}
          className="border px-2"
        >
          Next
        </button>
      </div>
    </div>
  );
}

export const displayCveDashboard = () => <CveDashboard />;
