import { readFileSync, writeFileSync } from 'node:fs';
import { fileURLToPath } from 'node:url';
import path from 'node:path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const root = path.resolve(__dirname, '..');
const iconsSourcePath = path.join(root, 'components', 'ui', 'icons', 'icons.tsx');
const outputPath = path.join(root, 'docs', 'icon-gallery.md');

const source = readFileSync(iconsSourcePath, 'utf8');
const iconRegex = /export const (\w+) = \(props: IconProps\) => \(\s*<IconBase[^>]*>\s*([\s\S]*?)\s*<\/IconBase>\s*\);/g;

const icons = [];
let match;
while ((match = iconRegex.exec(source))) {
  const [, name, inner] = match;
  const markup = inner
    .split('\n')
    .map(line => line.trim())
    .filter(Boolean)
    .join('\n    ');
  const svg = `<svg class="icon-preview" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">\n    ${markup}\n  </svg>`;
  icons.push({ name, svg });
}

if (!icons.length) {
  throw new Error('No icons found in components/ui/icons/icons.tsx');
}

icons.sort((a, b) => a.name.localeCompare(b.name));

const rows = icons
  .map(({ name, svg }) => {
    const usage = `\`import { ${name} } from '@/components/ui/icons';\`<br />\`<${name} size={24} />\``;
    return `| ${svg} | ${name} | ${usage} |`;
  })
  .join('\n');

const content = `# Icon Gallery\n\n> Generated by \`yarn build:icons\` on ${new Date().toISOString()}.\n\n<style>\n.icon-preview {\n  width: 32px;\n  height: 32px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto;\n}\n</style>\n\n| Icon | Name | Usage |\n| --- | --- | --- |\n${rows}\n`;

writeFileSync(outputPath, content);
console.log(`Icon gallery written to ${path.relative(root, outputPath)}`);
