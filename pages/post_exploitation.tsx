"use client";

import React, { useState } from 'react';
import Meta from '../components/SEO/Meta';
import modules, { ModuleMetadata } from '../modules/metadata';
import ModuleCard from '../components/ModuleCard';
import VirtualList from 'rc-virtual-list';
import { computeRelAttribute, LINK_UNAVAILABLE_COPY, sanitizeUrl } from '../utils/urlPolicy';

export default function PostExploitation() {
  const [query, setQuery] = useState('');
  const [selected, setSelected] = useState<ModuleMetadata | null>(null);
  const [selectedTags, setSelectedTags] = useState<string[]>([]);

  const transcript = `meterpreter > getuid\nServer username: NT AUTHORITY\\SYSTEM\nmeterpreter > keyscan_start\nStarting the keystroke sniffer...\nmeterpreter > run persistence_service\n[*] Creating service accomplished\n`;

  const copyTranscript = () => {
    navigator.clipboard?.writeText(transcript);
  };

  const allTags = Array.from(new Set(modules.flatMap((m) => m.tags))).sort();

  const toggleTag = (tag: string) => {
    setSelectedTags((prev) =>
      prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag]
    );
  };

  const filtered = modules.filter(
    (m) =>
      m.name.toLowerCase().includes(query.toLowerCase()) &&
      (selectedTags.length === 0 ||
        m.tags.some((t) => selectedTags.includes(t)))
  );

  return (
    <>
      <Meta />
      <main className="mx-auto grid gap-4 p-4 md:grid-cols-2">
        <section className="prose">
          <h1>Metasploit Post-Exploitation Modules</h1>
          <p>
            Post-exploitation refers to any actions taken after a session is opened. Rapid7&apos;s{' '}
            {(() => {
              const safeDoc = sanitizeUrl('https://docs.rapid7.com/metasploit/about-post-exploitation/');
              if (!safeDoc) {
                return (
                  <span className="italic">
                    Metasploit documentation ({LINK_UNAVAILABLE_COPY})
                  </span>
                );
              }
              return (
                <a
                  href={safeDoc.href}
                  target="_blank"
                  rel={computeRelAttribute(safeDoc.isExternal, 'noopener noreferrer')}
                >
                  Metasploit documentation
                </a>
              );
            })()}{' '}
            explains that these modules run on an active session to help operators gather deeper
            information, escalate privileges, pivot within the network, or maintain persistence.
          </p>
          <input
            type="text"
            placeholder="Search modules..."
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            className="mb-4 w-full rounded border p-2"
            aria-label="Search modules"
          />
          <div className="mb-4 flex flex-wrap gap-2">
            {allTags.map((tag) => (
              <label key={tag} className="flex items-center space-x-1">
                <input
                  type="checkbox"
                  checked={selectedTags.includes(tag)}
                  onChange={() => toggleTag(tag)}
                  className="rounded"
                  aria-label={`Toggle ${tag}`}
                />
                <span>{tag}</span>
              </label>
            ))}
          </div>
          {filtered.length === 0 ? (
            <p>No modules match your search.</p>
          ) : (
            <VirtualList
              data={filtered}
              height={600}
              itemHeight={120}
              itemKey="name"
              component="ul"
              className="grid gap-4 list-none p-0"
            >
              {(m: ModuleMetadata) => (
                <li key={m.name}>
                  <ModuleCard
                    module={m}
                    onSelect={setSelected}
                    selected={selected?.name === m.name}
                    query={query}
                  />
                </li>
              )}
            </VirtualList>
          )}
        </section>
        <aside className="prose">
          {selected ? (
            <>
              <h2>{selected.name}</h2>
              <p>{selected.description}</p>
              <h3>Options</h3>
              <ul>
                {selected.options.map((opt) => (
                  <li key={opt.name}>
                    <strong>{opt.name}</strong>{' '}
                    {opt.required ? '(required)' : '(optional)'} - {opt.description}
                  </li>
                ))}
              </ul>
            </>
          ) : (
            <p>Select a module to view details.</p>
          )}
          <h3>Example Transcript</h3>
          <div className="flex items-start gap-2">
            <pre className="flex-1 overflow-x-auto rounded bg-black p-3 text-green-400 font-mono">
              {transcript}
            </pre>
            <button
              onClick={copyTranscript}
              className="px-2 py-1 text-sm rounded bg-gray-700"
            >
              Copy
            </button>
          </div>
        </aside>
      </main>
    </>
  );
}

